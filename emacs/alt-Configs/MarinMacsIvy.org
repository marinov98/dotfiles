#+TITLE: MarinMacs Configuration 
#+AUTHOR: Marin Marinov  
#+EMAIL: mmarinov55555@gmail.com
#+LANGUAGE: en
#+TAGS: Emacs
#+DESCRIPTION: My emacs config for software development
This file is part of my [[https://github.com/marinov98/dotfiles][dotfiles repository]]

* Table of Contents :TOC_3:
- [[#general-settings][General Settings]]
- [[#evil-mode][Evil-mode]]
- [[#markup][Markup]]
  - [[#org][Org]]
  - [[#markdown][MarkDown]]
  - [[#writing][Writing]]
  - [[#pdf][PDF]]
  - [[#latex][Latex]]
- [[#dashboard][Dashboard]]
- [[#themes][Themes]]
- [[#modeline][Modeline]]
- [[#enhancements][Emacs Enhancements]]
  - [[#ibuffer][Ibuffer]]
  - [[#avy][Avy]]
  - [[#which-key][Which-Key]]
  - [[#ace-window][Ace-Window]]
  - [[#all-the-icons][All-the-icons]]
  - [[#neotree][Neotree]]
  - [[#treemacs][Treemacs]]
- [[#ivy][Ivy]]
- [[#projectile][Projectile]]
- [[#shell][Shell]]
- [[#treesitter][Treesitter]]
- [[#globals][Globals]]
  - [[#undo-tree][Undo Tree]]
  - [[#Yasnippet][Yasnippet]]
  - [[#flycheck][Flycheck]]
  - [[#company][Company]]
  - [[#eldoc][Eldoc]]
- [[#git][Git]]
- [[#hydra][Hydra]]
- [[#lsp][Language Server Protocal (lsp)]]
- [[#dap][Debug Adapter Protocal (dap)]]
- [[#development][Development]]
  - [[#c-cpp][C/C++]]
  - [[#python][Python]]
  - [[#web-development][Web-development]]
  - [[#JavaScript-TypeScript][JavaScript/TypeScript]]
  - [[#elixir][Elixir]]
  - [[#go][Go]]
  - [[#rust][Rust]]
- [[#diminish][Diminish]]

* General Settings 
 :PROPERTIES:
 :CUSTOM_ID: general-settings
 :END:
** Preferences
Variables (Change them as you see fit)
#+BEGIN_SRC emacs-lisp
  (defconst mpm-projects-dir "~/Projects/git"
    "Projects directory.")

  (defvar mpm-img-dir "~/.emacs.d/img"
    "Images directory, mainly for dashboard package.")

  (defconst mpm-dashboard-banner-img "targetBanner.png"
    "Dashboard image.")

  (defvar mpm-org-dir "~/Projects/org"
    "Org directory.")

  (defvar mpm-notes-org "/Personal/notes.org"
    "Personal notes file.")
#+END_SRC
Indentation 
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)                    ;; disable tabs and use spaces
  (setq-default tab-width 4)                             ;; set default tab width 4
  (setq backward-delete-char-untabify-method 'hungry)    ;; backspaces entire tab instead of one space at a time
  (setq compilation-scroll-output 'first-error)          ;; compile scroll location
#+END_SRC
- Ligatures (Certain fonts contain ligatures and enhance the visuals)
- Proper support and usage of this package requires Emacs 28
#+BEGIN_SRC emacs-lisp
  (when (version<= "28.0.50" emacs-version)
    (use-package ligature
      :ensure t
      :hook (prog-mode . ligature-mode)
      :config
      ;; Enable the "www" ligature in every possible major mode
      (ligature-set-ligatures 't '("www"))
      ;; Enable traditional ligature support in eww-mode, if the
      ;; `variable-pitch' face supports it
      (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
      ;; Enable all Cascadia Code ligatures in programming modes
      (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                           ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                           "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                           "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                           "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                           "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                           "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                           "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                           ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                           "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                           "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                           "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                           "\\\\" "://"))))
#+END_SRC
- Parenthesis, Brackets, Lines, etc (make sure they auto close)
#+begin_src emacs-lisp
  (use-package elec-pair ;; auto closing brackets
      :ensure nil
      :hook ((prog-mode . electric-pair-mode)
              (text-mode . electric-pair-mode))) 

  (use-package paren ;; highlight matching parenthesis
      :custom
      (show-paren-when-point-inside-paren t)
      :config
      (show-paren-mode 1))

  (use-package hl-line ;; highlight the current line
      :config
      (global-hl-line-mode 1))
#+end_src
- Options, display
- I like to use [[https://github.com/tonsky/FiraCode][Fira Code]] font
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((font . "Fira Code-12")))    ;; set font and font size
  (setq visible-bell t)                                    ;; disable end of buffer sounds
  (setq inhibit-startup-screen t)                          ;; disable startup screen
  (when (and (version<= "29.0.50" emacs-version) (not (string-equal system-type "windows-nt")))
    (add-to-list 'default-frame-alist '(alpha-background . 90))) ;; Emacs 29 adds true transparency
#+END_SRC
- Line numbers
  - Emacs versions after 26 contain built-in line numbers
  - relative line numbers are very useful when combined with vim bindings as they help you see how far you need to jump to get where you want to 
#+BEGIN_SRC emacs-lisp
  (when (version<= "26.0.50" emacs-version)
    (use-package display-line-numbers
        :custom
        (display-line-numbers-type 'relative) ;; relative line numbers help you see how far you need to jump to get where you want to
        (display-line-numbers-current-absolute t)
        (display-line-numbers-width 2)
        (display-line-numbers-widen t)
        :config
        (global-display-line-numbers-mode 1)
        ;; Disable line numbers for some mode
        (dolist (mode '(org-mode-hook term-mode-hook neotree-mode-hook shell-mode-hook treemacs-mode-hook eshell-mode-hook))
               (add-hook mode (lambda () (display-line-numbers-mode 0))))))
#+END_SRC
Displaying time and date in emacs
#+BEGIN_SRC emacs-lisp
  (use-package time
      :custom
      (display-time-24hr-format t) ;; 24hr format because I'm european :)
      :config
      (display-time-mode -1)) ;; toggle time mode on and off
#+END_SRC
Convenient yes or no and disable bars/blinking cursor
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)           ;; change yes or no to y or n
  (setq use-dialog-box nil)               ;; Don't pop up UI dialogs when prompting
  (menu-bar-mode -1)                      ;; disable menu bar
  (scroll-bar-mode -1)                    ;; disable scroll bar
  (toggle-scroll-bar -1)                  ;; disable scroll bar toggle
  (tool-bar-mode -1)                      ;; disable tool bar
  (blink-cursor-mode -1)                  ;; make cursor stop blinking
#+END_SRC
Disable back up and restrict histories files (comment if you want to enable backup files) 
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)             ;; stop creating backup~ files
  (setq auto-save-default nil)             ;; stop creating autosave# files
  (setq create-lockfiles nil)              ;; stop creating any # files

  (setq history-length 30)
  (put 'minibuffer-history 'history-length 30)
  (put 'evil-ex-history 'history-length 30)
  (put 'kill-ring 'history-length 25)
#+END_SRC
Emacs has native support for the GNU Debugger (GDB), and we can make it a little better
#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t)                ;; have multiple windows when debugging
  (setq gdb-show-main t)                   ;; Non-nil means display source file containing the main routine at startup
#+END_SRC
The settings below are mainly for linux, you can edit this section if you want to change what browser emacs uses to open links
#+begin_src emacs-lisp
  (when (string-equal system-type "gnu/linux")
    (setq
      browse-url-browser-function
      '(("https://www.netflix.com/" . browse-url-firefox) ;; firefox deals better with video players on linux
      ("." . browse-url-chromium))))
#+end_src
** Goto Config
A nice and quick way to view/edit my configuration at any time
  #+begin_src emacs-lisp
    (defun goto-MarinMacs ()
      "Jump to configuration file."
      (interactive)
      (find-file mpm-config-file-location))
    (global-set-key (kbd "C-c m") 'goto-MarinMacs) ;; secondary binding is SPC u m
  #+end_src
* Evil-Mode
 :PROPERTIES:
 :CUSTOM_ID: evil-mode
 :END:
 - Packages needed to emulate vim inside Emacs. 
 - Make sure you have [[#undo-tree][undo-tree]] package installed 
 - I have mapped my caps lock to both esc and ctrl to utilize both vim and emacs bindings
 - I placed all the evil packages here so that if this section gets deleted any alias to evil mode will be gone
** Essentials
 - Evil mode grants us vim bindings and evil-leader allows us to create a <leader> key which creates limitless possibilities for keybindings
 - Official repository for Evil Mode: https://github.com/emacs-evil/evil
 - (I don't use anymore) Evil Leader repository: https://github.com/cofi/evil-leader 
 - General repository: [[https://github.com/noctuid/general.el][General]]
 - evil-collections: There were certain modes that open with vanilla emacs bindings, this package ensures every mode starts in evil mode
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup)
    ;; set up 'SPC' as the global leader key
    (general-create-definer mpm/leader-keys
       :states '(normal insert visual emacs)
       :keymaps 'override
       :prefix "SPC" ;; set leader
       :global-prefix "S-SPC") ;; access leader in insert mode

    (mpm/leader-keys
       "SPC" '(hydra-projectile/body :wk "Projectile Hydra")
       "w" '(hydra-window/body :wk "Window Hydra")
       "S" '(hydra-smerge/body :wk "Smerge Hydra")
       "l" '(hydra-code/body :wk "LSP Hydra")
       "a" '(hydra-avy/body :wk "Avy Hydra")
       "g" '(hydra-git/body :wk "Git Hydra")
       "v" '(hydra-writing/body :wk "Writing Hydra")
       "u" '(hydra-utility/body :wk "Utility Hydra")
       "o" '(hydra-org/body :wk "Org Hydra"))

    (mpm/leader-keys
       "d" '(:ignore t :wk "Dired/Describe")
       "d d" '(dired :wk "Open dired")
       "d h" '(hydra-describe/body :wk "Describe Hydra")
       "d j" '(dired-jump :wk "Dired jump to current")
       "d f" '(wdired-finish-edit :wk "Writable dired finish edit")
       "d w" '(wdired-change-to-wdired-mode :wk "Writable dired")
       "d n" '(neotree-dir :wk "Open directory in neotree"))


    (mpm/leader-keys
       "i" '(:ignore t :wk "Ivy/Swiper/Counsel")
       "i c" '(counsel-compile :wk "Counsel Compile")
       "i g" '(counsel-git :wk "Counsel Git")
       "i p" '(counsel-projectile-find-file :wk "Projectile find file")
       "i f" '(counsel-fzf :wk "Counsel FZF")
       "i r" '(counsel-rg :wk "Counsel Rg")
       "i s" '(swiper-isearch :wk "Swiper Isearch")
       "i i" '(ibuffer :wk "Ibuffer")
       "i o" '(ivy-occur :wk "Ivy Occur")
       "i y" '(counsel-yank-pop :wk "Counsel Yank Pop")
       "i m" '(swiper-multi :wk "Swiper Multi Select"))

    (mpm/leader-keys
       "b" '(:ignore t :wk "Buffers/BookMark")
       "b i" '(ivy-switch-buffer :wk "(Ivy)Switch Buffer")
       "b c" '(counsel-switch-buffer :wk "(Counsel)Switch Buffer")
       "b b" '(evil-buffer :wk "Ctrl+^ Buffer")
       "b z" '(bury-buffer :wk "Bury Buffer")
       "b p" '(switch-to-prev-buffer :wk "Previous Buffer")
       "b n" '(switch-to-next-buffer :wk "Next Buffer"))

    (mpm/leader-keys
       "q" '(delete-window :wk "Delete Window")
       "Q" '(save-buffers-kill-terminal :wk "Save Buffers - Kill Terminal")
       "k" '(kill-current-buffer :wk "Kill Current Buffer")
       "K" '(kill-buffer :wk "Kill Buffer"))

    (mpm/leader-keys
       "RET" '(company-complete :wk "Company Complete")
       "y" '(yas-expand :wk "yas-expand")
       "s" '(save-buffer :wk "Save Buffer")
       "f" '(counsel-projectile :wk "Projectile Find File/Buffer")
       "." '(counsel-find-file :wk "Find File")
       "/" '(swiper-multi :wk "Swiper Multi")
       "m" '(counsel-M-x :wk "Counsel M-x")
       "*" '(swiper-thing-at-point :wk "Swiper at Point"))

    (mpm/leader-keys
       "r" '(:ignore t :wk "Grep Actions")
       "r g" '(counsel-git-grep :wk "Counsel Git Grep")
       "r /" '(grep :wk "Grep")
       "r r" '(rgrep :wk "Grep Recursive")
       "r w" '(:ignore t :wk "Wgrep Actions")
       "r w c" '(ivy-wgrep-change-to-wgrep-mode :wk "ivy to wgrep mode")
       "r w e" '(wgrep-exit :wk "Wgrep Exit")
       "r w a" '(wgrep-abort-changes :wk "Wgrep Abort Changes")
       "r w f" '(wgrep-finish-edit :wk "Wgrep Finish Edit"))

    (mpm/leader-keys
      "c" '(:ignore t :wk "Coding")
      "c /" '(comment-region :wk "Comment Region")
      "c u" '(uncomment-region :wk "Uncomment Region")
      "c l" '(hydra-launcher/body :wk "Launcher Hydra")
      "c m" '(hydra-mc/body :wk "Multiple Cursors Hydra")
      "c s" '(shell :wk "Shell")
      "c f" '(:ignore t :wk "Flycheck options")
      "c f e" '(flycheck-explain-error-at-point :wk "Flycheck explain error")
      "c f s" '(flycheck-select-checker :wk "Flycheck select checker")
      "c f d" '(flycheck-disable-checker :wk "Flycheck disable checker")
      "c f h" '(flycheck-describe-checker :wk "Flycheck describe checker")
      "c f m" '(flycheck-mode :wk "Flycheck mode")
      "c f M" '(flycheck-manual :wk "Flycheck manual")
      "c f v" '(flycheck-verify-setup :wk "Flycheck verify setup")
      "c f l" '(flycheck-list-errors :which-key "Flycheck List Errors"))

    (mpm/leader-keys
      "e" '(:ignore t :wk "Editing/Evil")
      "e e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e e s" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e e r" '(eval-region :wk "Evaluate elisp in region")
      "e s" '(eshell :wk "Emacs Shell")
      "e h" '(counsel-esh-history :which-key "Eshell history")
      "e m" '(hydra-bookmark/body :which-key "Bookmark Hydra")
      "e d" '(evil-goto-definition :wk "Evil goto definition")
      "e *" '(evil-search-word-forward :wk "Evil Search at Point")
      "e /" '(evil-search-forward :wk "Evil search forward"))

    (mpm/leader-keys
      "t" '(:ignore t :wk "Neotree/Treemacs")
      "t n" '(neotree-toggle :wk "Toggle Neotree")
      "t e" '(treemacs :wk "Treemacs")
      "t f" '(treemacs-find-file :wk "Treemacs find file")
      "t s" '(treemacs-switch-workspace :wk "Treemacs switch workspace")
      "t p" '(treemacs-projectile :wk "Treemacs Projectile")
      "t w" '(treemacs-select-window :wk "Treemacs select window")
      "t l" '(:ignore t :wk "LSP-Treemacs")
      "t l s" '(lsp-treemacs-symbols :wk "LSP Treemacs Symbols")
      "t l r" '(lsp-treemacs-references :wk "LSP Treemacs References")
      "t l e" '(lsp-treemacs-errors-list :wk "LSP Treemacs Errors List")))

  (use-package evil
      :ensure t
      :init
      (setq evil-want-keybinding nil)
      (setq evil-undo-system 'undo-redo)
      :bind
      ((:map evil-normal-state-map
         ("C-/" . comment-line)))
      :config
      (evil-mode 1))

  (use-package evil-collection
      :after evil
      :ensure t
      :custom
      (evil-collection-company-use-tng nil) ;; I hacked this already (Personal preference)
      (evil-collection-setup-debugger-keys nil) ;; no need for this (Again.. Personal preference)
      :config
      (evil-collection-init))

#+END_SRC
** Evil utility 
- Below evil packages are extras that enhance the evil-mode experience in emacs
#+BEGIN_SRC emacs-lisp
      ;; like tpope's vim-surround
      (use-package evil-surround
          :ensure t
          :config
          (global-evil-surround-mode 1))

      (use-package evil-mc
          :ensure t
          :config
          (global-evil-mc-mode 1))
#+END_SRC
* Markup
 :PROPERTIES:
 :CUSTOM_ID: markup
 :END:
** Org
 :PROPERTIES:
 :CUSTOM_ID: org
 :END:
 - 'Org mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.'  
 - Org manual: https://orgmode.org/
#+BEGIN_SRC emacs-lisp
  (use-package org 
      :ensure t
      :custom
      (org-file-apps
        '(("\\.pdf\\(::[0-9]+\\)?\\'" . "epdfview %s")))
      :pin org)

  ;; allow easier snippet insertion  
  (when (version<= "27.0.50" emacs-version)         
    (require 'org-tempo))

  ;; bullets
  (use-package org-bullets
      :ensure t
      :hook
      (org-mode . org-bullets-mode))

#+END_SRC
Custom-set variables and functions
#+begin_src emacs-lisp

  ;; Org custom settings
  (custom-set-variables
           '(org-directory mpm-org-dir)
           '(org-default-notes-file (concat org-directory mpm-notes-org)))

      (defun marinov/goto-org-directory ()
        "goes to my org directory."
        (interactive)
        (find-file org-directory))

      (defun marinov/jump-to-notes ()
        "go to notes file."
        (interactive)
        (find-file org-default-notes-file))

      ;; sometimes I edit within org and I forget to enter src but I want to just go to src to evaluate
      (defun marinov/enter-eval ()
       "enter source, and evaluate the buffer."
       (interactive)
       (org-edit-special)
       (eval-buffer))

#+end_src
** Markdown
 :PROPERTIES:
 :CUSTOM_ID: markdown
 :END:
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
      :ensure t
      :commands markdown-mode
      :mode
      ("\\.\\(md\\|markdown\\)\\'" . markdown-mode))
#+END_SRC
** Writing
 :PROPERTIES:
 :CUSTOM_ID: writing
 :END:
  - flyspell (checking spelling on the fly)
  - wc-mode (word counter)
  - writegood-mode (sentence/word choice checker)
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
      :ensure t
      :commands (ispell-change-dictionary
                 ispell-word
                 flyspell-buffer
                 flyspell-mode
                 flyspell-region)
      :bind
      (:map flyspell-mode-map
      ("C-M-i" . nil))) ;; messes with org autocomplete

  (use-package wc-mode
      :ensure t
      :commands wc-mode
      :config
      (global-set-key "\C-cw" 'wc-mode))

  (use-package writegood-mode
      :ensure t
      :commands writegood-mode
      :bind ("C-x w" . writegood-mode)) ;; messes with org snippets dont enable by default in org

#+END_SRC
** PDF
 :PROPERTIES:
 :CUSTOM_ID: pdf
 :END:
- Emacs support library for pdf files. Enable if you wish
- Look at the [[https://github.com/politza/pdf-tools][official repo]] for what you need to install and if your OS can support it
- Make sure to run =M-x pdf-tools-install= If you decided to enable this package and use it 
   #+begin_src emacs-lisp
	 (use-package pdf-view
	     :disabled
		 :ensure pdf-tools
		 :diminish (pdf-view-midnight-minor-mode pdf-view-printer-minor-mode)
		 :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
		 :magic ("%PDF" . pdf-view-mode)
		 :bind
		 (:map pdf-view-mode-map
		 ("C-s" . isearch-forward))
		 :init
		 (setq pdf-annot-activate-created-annotations t))
   #+end_src
** Latex 
 :PROPERTIES:
 :CUSTOM_ID: latex
 :END:
- I still actually prefer Overleaf for latex editing...Hoping to just use emacs for it one day
- I am also considering using org mode and then exporting to latex 
- Enable any if you wish, may be utilized in the future
- tex (powerful text formatter)
- auctex (extensible package for writing and formatting TeX files in Emacs)
- company-* packages you see are backends for the completion engine 'Company' which is shown further down in the config
#+BEGIN_SRC emacs-lisp
  (use-package tex
      :disabled
      :ensure auctex
      :mode
      ("\\.tex\\'" . LaTeX-mode)
      :config
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq TeX-save-query nil))
     
  (use-package company-auctex
      :disabled
      :after (auctex company)
      :config
      (company-auctex-init))    

  (use-package company-math
      :disabled
      :after (auctex company)
      :config
      (add-to-list 'company-backends 'company-math-symbols-unicode))    
#+END_SRC
* Dashboard 
 :PROPERTIES:
 :CUSTOM_ID: dashboard
 :END:
- This package is displayed when you start up emacs without selecting a file. 
- Prerequisites: https://github.com/cask/cask
- After installing cask, learn how to customize the dashboard by going here: https://github.com/emacs-dashboard/emacs-dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
      :ensure t
      :custom
      (dashboard-banner-logo-title "MarinMacs")
      (dashboard-set-heading-icons t)
      (dashboard-set-init-info t)
      (dashboard-set-file-icons t)
      (dashboard-set-navigator t)
      (dashboard-items '((recents  . 5)
                         (projects . 5)
                         (bookmarks . 5)
                         (agenda . 5)))
      (dashboard-footer-messages '("Maintained by Marin Marinov since 2018"))
      :init
      (if (file-directory-p mpm-img-dir)
            (setq dashboard-startup-banner (concat mpm-img-dir "/" mpm-dashboard-banner-img))
          (setq dashboard-startup-banner 'logo))
      :config
      (when (string-equal system-type "windows-nt" )
              (advice-add #'dashboard-replace-displayable :override #'identity)) ;; icons have issue displaying on windows, this fixes it
      (dashboard-setup-startup-hook)) 
#+END_SRC
* Themes
 :PROPERTIES:
 :CUSTOM_ID: themes
 :END:
** Favorite-Themes
*** Colorful and visually pleasing    
- Spacemacs-theme
- Zerodark
- Doom-one and Doom-dracula
- catppuccin
- JellyBeans 
- modus-vivendi (amazing color contrast)
*** Easy on the eyes
- doom-gruvbox
- doom-solarized-dark
- doom-nord
- catppuccin
- Zenburn
- Planet
*** For Org and any Markdown Language
- Poet
** Customization
You can enable/disable any themes that you like here
#+BEGIN_SRC emacs-lisp
  ;; BE AWARE: emacs can have multiple themes on at the same time
  ;; Multiple themes can mix into a super theme
  ;; Some themes do not mix well which is why I disable themes

   (use-package spacemacs-common
       :disabled
       :ensure spacemacs-theme
       :config (load-theme 'spacemacs-dark t))

   (use-package doom-themes
       :ensure t
       :custom
       (doom-themes-enable-bold t)
       (doom-themes-enable-italic t)
       :config
       (load-theme 'doom-dracula t)
       (doom-themes-visual-bell-config) ;; Enable flashing mode-line on errors
       (doom-themes-org-config)) ;; Corrects (and improves) org-mode's native fontification.

   (use-package catppuccin-theme
      :disabled
      :custom
      (catppuccin-flavor 'macchiato)
      :config
      (load-theme 'catppuccin :no-confirm))

   (use-package zerodark-theme
       :disabled
       :ensure t)

   (use-package minimal-theme
       :disabled
       :ensure t
       :config
       (load-theme 'minimal t))

   (use-package zenburn-theme
       :disabled
       :ensure t
       :config
       (load-theme 'zenburn t))

   (use-package poet-theme
       :disabled
       :ensure t)

   (use-package modus-vivendi-theme
       :disabled
       :ensure t
       :config
       (setq modus-vivendi-theme-bold-constructs t)
       (load-theme 'modus-vivendi t))

   (use-package modus-operandi-theme
       :disabled
       :ensure t
       :config (load-theme 'modus-operandi t))

   (use-package jbeans-theme
       :disabled
       :ensure t
       :config
       (load-theme 'jbeans t))

   (use-package planet-theme
       :disabled
       :ensure t
       :config 
       (load-theme 'planet t))
#+END_SRC
* Modeline
 :PROPERTIES:
 :CUSTOM_ID: modeline
 :END:
- The modeline is at the bottom of the window, it describes what is going on in the current buffer
  - it can display modes, time, filenames, and even line numbers
- You can pick one of these modeline themes, simply enable the one you want to try and disable the rest
- If icons on the modeline are not displaying properly (especially in MS Windows) try running  =M-x nerd-icons-install-fonts=
#+BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;   
;; Spaceline
;;;;;;;;;;;;;;;;;;;;;;   

  (use-package spaceline
      :disabled
      :ensure t
      :custom-face
      (spaceline-highlight-face ((t (:background "#ffc600" :foreground "black"))))
      :custom
      (spaceline-toggle-flycheck-info-off)
      :config
      (require 'spaceline-config)
      (setq powerline-default-separator (quote arrow))
      (spaceline-highlight-face-default) 
      (spaceline-spacemacs-theme))



;;;;;;;;;;;;;;;;;;;;;;   
;;  Telephone-line
;;;;;;;;;;;;;;;;;;;;;;   
   
  (use-package telephone-line
      :disabled
      :ensure t
      :config
      (setq telephone-line-lhs
      '((evil   . (telephone-line-evil-tag-segment))
        (accent . (telephone-line-vc-segment
                   telephone-line-erc-modified-channels-segment
                   telephone-line-process-segment))
        (nil    . (telephone-line-minor-mode-segment
                   telephone-line-buffer-segment))))
      (setq telephone-line-rhs
      '((nil    . (telephone-line-misc-info-segment))
        (accent . (telephone-line-major-mode-segment))
        (evil   . (telephone-line-airline-position-segment))))
        (telephone-line-mode 1))



    
;;;;;;;;;;;;;;;;;;;;;;   
;; lightweight doom theme
;;;;;;;;;;;;;;;;;;;;;;   

  (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))

#+END_SRC
* Ivy
 :PROPERTIES:
 :CUSTOM_ID: ivy
 :END:
- Ivy: an interactive interface for completion in Emacs
  - Alternatives to ivy include helm (heavier but more features) and ido (native to emacs)
- Ivy User Manual: https://oremacs.com/swiper/
#+BEGIN_SRC emacs-lisp
  ;; Ivy
  (use-package ivy
      :ensure t
      :diminish ivy-mode
      :custom
      (ivy-display-style 'fancy)
      (ivy-count-format "(%d/%d) ")
      (ivy-format-function 'ivy-format-function-line)
      :hook 
      ((after-init . ivy-mode)
      (ivy-mode . counsel-mode))
      :config
      (setq enable-recursive-minibuffers t))
      
#+END_SRC
- Swiper: an alternative to emacs's native isearch that uses ivy to show an overview of all matches.
- Counsel: extra functions and features that use ivy
- Counsel and other packages that use ivy (Like counsel-projectile) have support for popular search tools
    - [[https://github.com/BurntSushi/ripgrep][ripgrep]]
    - [[https://github.com/ggreer/the_silver_searcher][the silver searcher(ag)]]
#+BEGIN_SRC emacs-lisp
  ;; Swiper 
  (use-package swiper
      :ensure t
      :custom
      (swiper-action-recenter t)
      (swiper-goto-start-of-match t)
      (swiper-include-line-number-in-search t)
      :bind 
      (("C-s" . swiper-isearch)
      ("C-c C-r" . ivy-resume)
      :map evil-normal-state-map
      ("/" . swiper-isearch)
      ("*" . swiper-thing-at-point)))

    ;; Counsel
  (use-package counsel
      :ensure t
      :bind
      (("M-x" . counsel-M-x)
      ("C-x C-f" . counsel-find-file)
      ("C-x b" . counsel-switch-buffer)
      ("M-y" . counsel-yank-pop)
      :map evil-normal-state-map
      ("gs" . counsel-rg)
      :map ivy-minibuffer-map
      ("C-q" . ivy-occur) ;; inspired by vim quickfix list binding
      ("M-j" . ivy-next-line)
      ("M-k" . ivy-previous-line)) 
      :custom
      (counsel-find-file-ignore-regexp "\\(?:^[#.]\\)\\|\\(?:[#~]$\\)\\|\\(?:^Icon?\\)")
      (counsel-rg-base-command "rg -S --no-heading --line-number --color never %s .")
      (counsel-ag-base-command "ag -S --nocolor --nogroup %s")
      (counsel-pt-base-command "pt -S --nocolor --nogroup -e %s")
      (ivy-initial-inputs-alist nil) ;; removes starting ^ regex in M-x
      (counsel-find-file-at-point t))

#+END_SRC
wgrep combined counsel-rg and/or counsel-ag makes changing text in multiple places much easier
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t
    :custom
    (wgrep-change-readonly-file t))
#+end_src
* Enhancements 
 :PROPERTIES:
 :CUSTOM_ID: enhancements
 :END:
** Ibuffer
 :PROPERTIES:
 :CUSTOM_ID: ibuffer
 :END:
 Enhanced buffer management. This is a native Emacs feature 
 #+begin_src emacs-lisp
   (use-package ibuffer
       :hook (ibuffer-mode . (lambda ()
                               (ibuffer-auto-mode 1)
                               (ibuffer-switch-to-saved-filter-groups "default")))
       :custom
       (ibuffer-show-empty-filter-groups nil)
       :config
       (setq ibuffer-saved-filter-groups
           (quote (("default"
                   ("Ranger" (mode . ranger-mode))
                   ("Org" (name . "^.*org$"))
                   ("Text" (or
                           (mode . markdown-mode)
                           (mode . text-mode)
                           (mode . pdf-view-mode)
                           (mode . LaTeX-mode)))
                   ("Git" (or 
                           (mode . gitignore-mode)               
                           (mode . gitconfig-mode)               
                           (mode . magit-mode)))
                   ("Shell" (or (mode . eshell-mode) (mode . shell-mode)))
                   ("Elisp" (mode . emacs-lisp-mode))
                   ("Programming" (or ;; I dont have all of these modes but just in case for the future...
                                   (mode . python-mode)
                                   (mode . ruby-mode)
                                   (mode . go-mode)
                                   (mode . rust-mode)
                                   (mode . swift-mode)
                                   (mode . objc-mode)
                                   (mode . dart-mode)
                                   (mode . haskell-mode)
                                   (mode . csharp-mode)
                                   (mode . scala-mode)
                                   (mode . clojure-mode)
                                   (mode . java-mode)
                                   (mode . c-mode)
                                   (mode . c++-mode)))
                   ("Web Dev" (or
                               (mode . web-mode)
                               (mode . rjsx-mode)
                               (mode . css-mode)
                               (mode . js-mode)
                               (mode . typescript-mode)
                               (mode . js2-mode)))
                   ("Data" (or
                           (mode . csv-mode)
                           (mode . json-mode)
                           (mode . sql-mode)
                           (mode . yaml-mode)
                           (mode . graphql-mode)
                           (mode . dockerfile-mode)))
                   ("Help" (or
                           (name . "\*Help\*")
                           (name . "\*info\*")))
                   ("Emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$"))))))))

 #+end_src
** Avy
 :PROPERTIES:
 :CUSTOM_ID: avy
 :END:
 I did not think anything of this package until I actively used it in my workflow. This package proved to be nothing but amazing for jumping around text. Its inspiration comes from 
the vim package =easymotion=. This package really boosts your ability to fly around text even with the already fast motion vim keybindings. I utilize the keybindings in a hydra and 
a personal keybinding just because its so good. Check the [[https://github.com/abo-abo/avy][official repository]] If you want to know more.
#+BEGIN_SRC emacs-lisp
  (use-package avy 
      :ensure t
      :custom
      (avy-background t)
      (avy-timeout-seconds 0.4))
#+END_SRC
** Which-Key
 :PROPERTIES:
 :CUSTOM_ID: which-key
 :END:
 A cheat sheet that comes in only when you need it
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t 
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC
** Ace-Window
 :PROPERTIES:
 :CUSTOM_ID: ace-window
 :END:
Useful if you work on multiple windows and want an efficient way of switching between them
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
       :ensure t
       :init 
       (global-set-key (kbd "C-:") 'ace-window)
       (setq aw-background nil)
       (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC
** All-The-Icons
 :PROPERTIES:
 :CUSTOM_ID: all-the-icons
 :END:
- This is where the file icons come from
- Make sure to run =M-x all-the-icons-install-fonts= if you want them to work!
- Repo: https://github.com/domtronn/all-the-icons.el
#+BEGIN_SRC emacs-lisp
  ;; Pretty Icons
  (use-package all-the-icons
      :ensure t
      :if (display-graphic-p))

  ;; icons for ivy
  (use-package all-the-icons-ivy
      :ensure t
      :after (all-the-icons ivy)
      :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup)
      :custom
      (all-the-icons-ivy-file-commands
        '(counsel-find-file
          counsel-file-jump
          counsel-git
          counsel-recentf
          counsel-projectile
          counsel-projectile-switch-to-buffer
          counsel-projectile-switch-project
          counsel-projectile-find-file
          counsel-projectile-find-file-dwin
          counsel-projectile-find-dir)))

  ;; icons for dired/ranger mode
  (use-package all-the-icons-dired
      :ensure t
      :config
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
** Neotree
 :PROPERTIES:
 :CUSTOM_ID: neotree
 :END:
- 'A emacs tree plugin like NerdTree for Vim.'
- Amazing file browser and explorer.
- repo: https://github.com/jaypei/emacs-neotree
#+BEGIN_SRC emacs-lisp
  ;; Neotree
  (use-package neotree
      :ensure t
      :custom
      (neo-smart-open t) ; update every time its toggled
      (neo-show-hidden-files t)
      (neo-theme (if (display-graphic-p) 'icons 'arrow))) ; add icons (utilizes all-the-icon)
#+END_SRC
** Treemacs
 :PROPERTIES:
 :CUSTOM_ID: treemacs
 :END:
- Treemacs is a project explorer. Unlike NeoTree, Treemacs only opens up and displays project roots
- I did not think I would use it, but its a dependency for packages I use often (LSP) so I figured I would incorporate it into my workflow
- Repo: https://github.com/Alexander-Miller/treemacs
   #+begin_src emacs-lisp
     (use-package treemacs 
         :ensure t
         :custom
         (treemacs-resize-icons 4)
         (treemacs-show-cursor t))

     (use-package treemacs-evil 
         :after treemacs
         :ensure t)


     (use-package treemacs-projectile
         :after treemacs projectile
         :ensure t)

     (use-package treemacs-magit
         :after treemacs magit
         :ensure t)
   #+end_src
* Projectile
 :PROPERTIES:
 :CUSTOM_ID: projectile
 :END:
- Amazing tool for managing projects! 
- Projectile looks for git projects or projectils that contain a =.projectile=
- Tip: install [[https://github.com/sharkdp/fd][fd]] which is much faster than =find=. If =fd= is found, projectile will use as a replacement for find.
- Projectile Homepage: https://projectile.readthedocs.io/en/latest/ 
- Counsel-Projectile: https://github.com/ericdanan/counsel-projectile 
#+BEGIN_SRC emacs-lisp
    (use-package projectile
        :ensure t
        :diminish projectile-mode
        :bind 
        (("C-c p" . projectile-command-map))
        :custom 
        (projectile-sort-order 'recently-active)
        (projectile-completion-system 'ivy)
        (projectile-auto-discover nil) ;; Use 'projectile-discover-projects-in-search-path' manually instead
        (projectile-globally-ignored-file-suffixes '(".pyc" ".o"))
        :init
        (when (file-directory-p mpm-projects-dir)
          (setq projectile-project-search-path `(,mpm-projects-dir)))
        :config
        (dolist (file '(".DS_Store")) ;; add/remove any files
          (add-to-list 'projectile-globally-ignored-files file))
        (dolist (dir '("^\\venv$" "^\\venv_dev$" "^\\node_modules$")) ;; add/remove any directories 
          (add-to-list 'projectile-globally-ignored-directories dir))
        (setq projectile-indexing-method (if (memq system-type '(ms-dos windows-nt cygwin)) ;; ensure alien on anything not windows related
                                               'native
                                             'alien)))

    ;; Counsel-Projectile (I utilize counsel projectile bindings in my hydra-projectile)
    (use-package counsel-projectile
      :ensure t
      :config (counsel-projectile-mode))
#+END_SRC
* Shell
 :PROPERTIES:
 :CUSTOM_ID: shell
 :END:
- exec-path-from-shell: https://github.com/purcell/exec-path-from-shell
- Eshell: https://www.gnu.org/software/emacs/manual/html_mono/eshell.html
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
         :ensure t
         :config
         (when (memq window-system '(mac ns x)) ;; check if its mac
           (exec-path-from-shell-initialize)))

     (use-package eshell
          :ensure t
          :bind (("C-`" . eshell))
          :custom
          (eshell-hist-ignoredups t)
          (eshell-scroll-to-bottom-on-input t)
          (eshell-destroy-buffer-when-process-dies t)
          (eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
          :config
          ;; configuration found from this link: https://superuser.com/questions/890937/how-to-show-git-branch-in-emacs-shell
          (defun git-prompt-branch-name ()
            "Get current git branch name"
            (let ((args '("symbolic-ref" "HEAD" "--short")))
                (with-temp-buffer
                (apply #'process-file "git" nil (list t nil) nil args)
                (unless (bobp)
                    (goto-char (point-min))
                    (buffer-substring-no-properties (point) (line-end-position))))))

            (defun 4lex1v:eshell-prompt ()
            (let ((branch-name (git-prompt-branch-name)))
                (concat
                "\n# " (user-login-name) " in " (abbreviate-file-name (eshell/pwd)) "\n"
                (if branch-name (format "git:(%s) >> " branch-name) ">> ")
                )))         

            (setq eshell-prompt-function #'4lex1v:eshell-prompt
                eshell-prompt-regexp ".*>>+ "))
   #+END_SRC
* Tree-Sitter
:PROPERTIES:
:CUSTOM_ID: treesitter
:END:
- Tree-sitter is a parser generator tool and an incremental parsing library and it comes by default in Emacs 29
- [[https://tree-sitter.github.io/tree-sitter/][Tree-sitter Homepage]]
- This will require experimentation and support
- Once a language source has been added you should be able to install it with =treesit-install-language-grammar=
- You may also choose to evaluate this piece of elisp code to install everything in the list at once =(mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))=
#+BEGIN_SRC emacs-lisp
  (when (version<= "29.0.50" emacs-version)
    (use-package treesit
      :after lsp-mode
      :hook
      ((c-ts-mode c++-ts-mode bash-ts-mode cmake-ts-mode toml-ts-mode rust-ts-mode go-ts-mode css-ts-mode yaml-ts-mode json-ts-mode js-ts-mode typescript-ts-mode tsx-ts-mode) . lsp-deferred)
      :config
      (setq treesit-language-source-alist
        '((bash "https://github.com/tree-sitter/tree-sitter-bash")
          (cmake "https://github.com/uyha/tree-sitter-cmake")
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (elisp "https://github.com/Wilfred/tree-sitter-elisp")
          (go "https://github.com/tree-sitter/tree-sitter-go")
          (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
          (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (make "https://github.com/alemuller/tree-sitter-make")
          (markdown "https://github.com/ikatyang/tree-sitter-markdown")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (toml "https://github.com/tree-sitter/tree-sitter-toml")
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
          (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")))))
       ;; I would uncomment below if you like -ts-mode update to the syntax highlighting (Some syntax changes are worse imo)
       ;; (setq major-mode-remap-alist 
       ;;   '((yaml-mode . yaml-ts-mode)
       ;;     (bash-mode . bash-ts-mode)
       ;;     (js2-mode . js-ts-mode)
       ;;     (typescript-mode . typescript-ts-mode)
       ;;     (json-mode . json-ts-mode)
       ;;     (css-mode . css-ts-mode)
       ;;     (python-mode . python-ts-mode)))))
#+END_SRC 
* Globals
 :PROPERTIES:
 :CUSTOM_ID: globals
 :END:
 The below packages provide minor modes that will be enabled in every buffer (hence the global)
** Undo-Tree
 :PROPERTIES:
 :CUSTOM_ID: undo-tree
 :END:
 - You MUST have one of the following for [[#evil-mode][Evil Mode]] to work OR use undo-redo if your Emacs version is over 28
 - replaces Emacs' undo system with a system that treats undo history as what it is: a branching tree of changes. 
 - Even if you are using emacs without evil-mode, undo-tree can prove useful
 - Documentation: https://elpa.gnu.org/packages/undo-tree.html
 - Undo-fu is an alternative, lightweight alternative to Undo tree (because undo tree sometimes is too buggy due to Emacs version or new config)
 - Undo-fu documentation [[https://github.com/emacsmirror/undo-fu]]
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
      :disabled
      :init
      (global-undo-tree-mode)
      :config
      (with-eval-after-load 'undo-tree
        (setq undo-tree-auto-save-history nil)))

  (use-package undo-fu
    :disabled
    :config
    (global-unset-key (kbd "C-z"))
    (global-set-key (kbd "C-z")   'undo-fu-only-undo)
    (global-set-key (kbd "C-S-z") 'undo-fu-only-redo)
    ;; On modern systems you may wish to use much higher limits.
    (setq undo-limit (* 1024 1024 32)) ; 32mb.
    (setq undo-strong-limit (* 1024 1024 48)) ; 48mb.
    (setq undo-outer-limit (* 1024 1024 480))) ; 480mb
#+END_SRC
** Yasnippet
 :PROPERTIES:
 :CUSTOM_ID: Yasnippet
 :END:
- all the packages related to snippets
- *YASnippet* is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates.
- You may or may not have to do rebindings if autocomplete conflicts with snippets
- repo: https://github.com/joaotavora/yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet 
      :ensure t
      :diminish yas-minor-mode
      :bind
      ((:map yas-minor-mode-map
      ("<tab>" . nil))) ;; changed for S-SPC y 
      :config
      (yas-reload-all)
      (add-hook 'text-mode-hook #'yas-minor-mode)
      (add-hook 'prog-mode-hook #'yas-minor-mode))

  (use-package yasnippet-snippets 
      :after yasnippet
      :ensure t)

  ;; snippets for React.js
  (use-package react-snippets
      :after yasnippet
      :ensure t)
#+END_SRC 
** FlyCheck
 :PROPERTIES:
 :CUSTOM_ID: flycheck
 :END:
- Checking syntax on the fly...basically 
- Official Site: https://www.flycheck.org/en/latest/
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
       :ensure t
       :custom-face
       (flycheck-info ((t (:underline (:style wave :color "#87cefa")))))
       (flycheck-warning ((t (:underline (:style wave :color "#ffb95c")))))
       (flycheck-error ((t (:underline (:style wave :color "#cc0202")))))
       :custom
       (flycheck-display-errors-delay 0.5)
       :config
       (global-flycheck-mode t))
#+END_SRC
** Company
 :PROPERTIES:
 :CUSTOM_ID: company
 :END:
- This is one of the major completion engines in Emacs
- By itself it does not do much, you need to add backends to it for your specific development language to get autocomplete
- Official Site: http://company-mode.github.io/
#+BEGIN_SRC emacs-lisp
  (use-package company
      :ensure t
      :after lsp-mode
      :hook (prog-mode . company-mode)
      :bind
      (:map company-active-map
          ("<tab>" . company-complete-selection) 
          ("M-j" . company-select-next)  
          ("M-k"  . company-select-previous))
      (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-tooltip-limit 8) ; how many candidates to show
      (company-idle-delay 0.1) ; How much to delay to completion
      (company-minimum-prefix-length 2) ;; show completions after 2 chars
      (company-selection-wrap-around t) ;; goes to start of selection if you reached the bottom 
      (company-require-match 'never)) ;; dont need to pick a choice

#+END_SRC 
** Eldoc
 :PROPERTIES:
 :CUSTOM_ID: eldoc
 :END:
- Minor Mode which shows you, in the echo area, the argument list of the function call you are currently writing. Very handy.
- Documentation: https://www.emacswiki.org/emacs/ElDoc
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
      :diminish eldoc-mode
      :hook (emacs-lisp-mode . eldoc-mode)
      :config
      (global-eldoc-mode -1))
#+END_SRC 
* Git
 :PROPERTIES:
 :CUSTOM_ID: git
 :END:
- [[https://magit.vc/][Magit]] is a great git interface I have yet to master...
- git-timemachine: flip through a file's full list of version. Revert to any given phase easily
#+BEGIN_SRC emacs-lisp
      ;; hydra takes care of my magit bindings
      (use-package magit :ensure t)

      (use-package git-commit
          :after magit
          :custom
          (git-commit-summary-max-length 50) ;; in accordance with https://chris.beams.io/posts/git-commit/
          :config
          (setq git-commit-style-convention-checks
                '(non-empty-second-line
                overlong-summary-line)))

      (use-package git-modes
          :ensure t
          :mode (("\\.gitconfig\\'" . gitconfig-mode)
                 ("\\.gitignore\\'" . gitignore-mode) 
                 ("\\.dockerignore\\'" . gitignore-mode))) ;; syntax from gitignore is more or less identical to that of .dockerignore

      (use-package magit-repos
          :after magit
          :commands magit-list-repositories
          :config
          (when (file-directory-p mpm-projects-dir)
            (setq magit-repository-directories `((,mpm-projects-dir . 1)))))

      (use-package git-timemachine
          :ensure t
          :commands git-timemachine)

#+END_SRC
Smerge mode deals with merge conflicts in git.
#+BEGIN_SRC emacs-lisp
  (use-package smerge-mode
      :after hydra
      :hook (magit-diff-visit-file . (lambda ()
                                      (when smerge-mode
                                        (hydra-smerge/body)))))
#+END_SRC
* Hydra
 :PROPERTIES:
 :CUSTOM_ID: Hydra
 :END:
- You can go pretty crazy here, this package is one of my favorites
- Allows you set up your own key maps where pressing one key instantly gives access to many other keybindings
- Repo: https://github.com/abo-abo/hydra (Has a video demo)
- =pretty-hydra= provides a really nice macro =pretty-hydra-define= that takes columns of hydra heads and expands to defhydra calls with pretty docstrings generated from the heads.
#+BEGIN_SRC emacs-lisp
  (use-package hydra
      :ensure t
      :config
      (setq hydra-is-helpful t)
      (setq hydra-hint-display-type 'lv))
      
  (use-package pretty-hydra
      :ensure t)
#+END_SRC
** Hydras
- Great hydras make for a great workflow (Let's hope they are great...)
- Customize as you see fit (colors affect hydra behavior!)
| color    | toggle                     |
|----------+----------------------------|
| red      |                            |
| blue     | :exit t                    |
| amaranth | :foreign-keys warn         |
| teal     | :foreign-keys warn :exit t |
| pink     | :foreign-keys run          |
*** Describe (help describe anything and open up documentation)
#+BEGIN_SRC emacs-lisp
  ;; help
  (defhydra hydra-describe (:color red :columns 3)
    "Describe 🤓"
    ("d" counsel-descbinds "bindings")
    ("f" counsel-describe-function "func")
    ("F" counsel-describe-face "face")
    ("k" describe-key "key")
    ("v" counsel-describe-variable "var")
    ("p" describe-package "package")
    ("s" describe-symbol "symbol")
    ("m" which-key-show-major-mode "major mode")
    ("M" describe-mode "modes")
    ("t" describe-theme "theme")
    ("q" nil "quit" :color blue))

#+END_SRC
*** Projectile (project management)
#+BEGIN_SRC emacs-lisp
    (pretty-hydra-define hydra-projectile (:color red :title "🚀 Projectile 🚀" :quit-key "q") 
      ("Finding"
      (("f" projectile-find-file-in-known-projects "find all")
      ("o" projectile-find-other-file "find other" :color blue)
      ("w" counsel-projectile-find-file-dwim "find-dwim")
      ("d" counsel-projectile-find-dir "find-dir")
      ("D" projectile-find-file-in-directory "find in dir"))

      "Search/Replace" ;; search and replace 
      (("a" counsel-projectile-ag "ag") 
      ("g" counsel-projectile-rg "rg")
      ("c" projectile-replace "replace")
      ("x" projectile-replace-regexp "replace regex"))

      "Switch"
      (("s" counsel-projectile-switch-project "switch project")
      ("b" counsel-projectile-switch-to-buffer "switch buffer")
      ("r" projectile-recentf "recent files"))

      "Finish"
      (("S" projectile-save-project-buffers "save project buffers")
      ("p" projectile-compile-project "compile")
      ("k" projectile-kill-buffers "kill project buffers"))))
#+END_SRC
*** Window (my attempt at window management)
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-window (:color pink :title "⚡⚡ Ivy + Windows ⚡⚡" :quit-key "q") 
    ("Ivy"
    (("f" counsel-find-file "find")
    ("x" counsel-M-x "M-x")
    ("b" counsel-switch-buffer "switch buffer"))

    "Splitting"
    (("o" delete-other-windows "delete other windows")
    ("v" split-window-right "v-split")
    ("2" split-window-below "h-split"))

    "Move"
    (("h" windmove-left "left")
    ("j" windmove-down "down")
    ("k" windmove-up "up")
    ("l" windmove-right "right")
    ("a" ace-window "ace-window"))


    "Resizing"
    (("s" shrink-window "shrink window")
    ("e" enlarge-window "enlarge window")
    ("S" shrink-window-horizontally "shrink horizontally")
    ("E" enlarge-window-horizontally "shrink horizontally")
    ("B" balance-windows "balance windows"))

    "Zoom"
    (("+" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("0" (text-scale-adjust 0) "reset"))

    "Quit"
    (("K" kill-current-buffer "kill current buffer")
    ("d" delete-window "delete window")
    ("D" kill-this-buffer "kill buffer"))))
#+END_SRC
*** Git (magit and timemachine)
#+BEGIN_SRC emacs-lisp
    (defhydra hydra-git (:color red)
      "⏳ Git ⏳"
      ("g" magit "magit")
      ("d" magit-dispatch "dispatch")
      ("l" magit-list-repositories "list repos")
      ("t" git-timemachine "timemachine")
      ("q" nil "quit" :color blue))
#+END_SRC
*** Smerge (for handling merge conflicts)
    #+begin_src emacs-lisp
   (pretty-hydra-define hydra-smerge (:color pink :title "⚡ Smerge ⚡" :quit-key "q")
     ("Move"
     (("n" smerge-next)
     ("p" smerge-prev))

     "Keep"
     (("b" smerge-keep-base)
     ("u" smerge-keep-upper)
     ("l" smerge-keep-lower)
     ("a" smerge-keep-all)
     ("RET" smerge-keep-current))

     "Diff"
     (("<" smerge-diff-base-upper)
     ("=" smerge-diff-upper-lower)
     (">" smerge-diff-base-lower)
     ("R" smerge-refine)
     ("E" smerge-ediff))


     "Other"
     (("C" smerge-combine-with-next)
     ("r" smerge-resolve)
     ("k" smerge-kill-current)
     ("ZZ" (lambda ()
            (interactive)
            (save-buffer)
            (bury-buffer))
        "Save and bury buffer" :color blue)))) 
    #+end_src
*** Code (jump to definitions and references, list errors, formatting)
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-code (:color red :title "📡 Code 📡" :quit-key "q") 
    ("Find"
    (("f" lsp-find-definition "find def") 
    ("r" lsp-find-references "find ref")
    ("g" lsp-ui-doc-glance "glance")
    ("i" lsp-ui-imenu "imenu"))

    "Refactor"
    (("c" lsp-rename "rename")
    ("s" hydra-style/body "format style" :color blue))

    "Errors"
    (("l" lsp-ui-flycheck-list "list errors")
    ("b" flycheck-buffer "flycheck buffer")
    ("e" flycheck-next-error "next error")
    ("E" flycheck-previous-error "prev error")))) 

  (pretty-hydra-define hydra-style (:color blue :title "📡 Style 📡" :quit-key "q") 
    ("Buffer"
    (("b" python-black-buffer "python-black")
    ("l" lsp-format-buffer "LSP" :color red)
    ("p" prettier-prettify "prettier")
    ("c" clang-format-buffer "clang"))

     "Imports"
     (("o" lsp-organize-imports "organize imports"))

    "Region"
    (("B" python-black-region "python-black")
    ("C" clang-format-region "clang")
    ("P" prettier-prettify-region "prettier")
    ("L" lsp-format-region "LSP" :color red))))
#+END_SRC
*** MC (Multiple Cursors)
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-mc (:color pink :title "Multiple Cursors" :quit-key "<escape>") 
    ("Goto"
      (("n" evil-mc-make-and-goto-next-match "make & next")
      ("N" evil-mc-make-and-goto-prev-match "make & prev")
      ("p" evil-mc-skip-and-goto-next-match "skip & next")
      ("P" evil-mc-skip-and-goto-prev-match "skip & prev")
      ("m" evil-mc-make-all-cursors "Make all"))

     "Line"
     (("J" evil-mc-make-cursor-move-next-line "make & up") 
     ("K" evil-mc-make-cursor-move-prev-line "make & down")) 

     "Manual"
     (("u" evil-mc-undo-last-added-cursor "undo cursor")
     ("g" evil-mc-make-cursor-here "make cursor")
     ("q" evil-mc-undo-all-cursors "undo all cursors" :color blue)
     ("r" evil-mc-resume-cursors "resume cursors" :color blue)))) 
#+END_SRC
*** Avy (Word finding)
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-avy (:color blue :title "↵ Avy ↵" :quit-key "q")
    ("Char"
    (("g" avy-goto-char "char 1" :color red)
    ("s" avy-goto-char-2 "char 2" :color red)
    ("t" avy-goto-char-timer "timed char" :color red))

    "Word"
    (("w" avy-goto-word-1 "goto word")
    ("W" avy-goto-word-0 "goto word 0"))

    "Line"
    (("l" avy-goto-line "goto line")
    ("L" avy-goto-end-of-line "goto eoline")
    ("m" avy-move-line "move line")
    ("K" avy-kill-whole-line "kill line")
    ("y" avy-copy-line "yank line"))

    "Resume"
    (("r" avy-resume "resume" :color red))))
#+END_SRC
*** Launcher (launch stuff)
  #+BEGIN_SRC emacs-lisp

  (defhydra hydra-launcher (:color red :columns 2)
    " Launch "
    ("h" man "man")
    ("g" (browse-url "https://www.google.com/") "Google")
    ("G" (browse-url "https://github.com/marinov98") "GitHub")
    ("n" (browse-url "https://www.netflix.com/") "Netflix")
    ("y" (browse-url "https://www.youtube.com/") "YouTube")
    ("m" (browse-url "https://www.messenger.com/") "Messenger")
    ("s" eshell "shell")
    ("a" ansi-term "ansi-term")
    ("q" nil "quit"))
  #+END_SRC
*** Writing (taking notes, and writing)
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-writing (:color red :columns 2)
    "✓ Writing and Spelling ✓"
    ("d" ispell-change-dictionary "change dict")
    ("s" ispell-word "spell word")
    ("f" flyspell-buffer "flyspell buffer")
    ("m" flyspell-mode "flyspell mode")
    ("r" flyspell-region "flyspell region")
    ("n" flyspell-goto-next-error "next error")
    ("w" writegood-mode "writegood mode")
    ("q" nil "quit"))
#+END_SRC
*** Utility (useful commands for me)
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-utility (:color red :title "😎 Utility 😎" :quit-key "q")
    ("Search"
    (("r" counsel-recentf "recent files")
    ("a" counsel-ag "ag")
    ("z" counsel-fzf "fuzzy-find"))

    "Debugging"
    (("b" gdb "gdb")
    ("d" dap-debug "dap debug")
    ("i" dap-debug-edit-template "debug template"))

    "Modes"
    (("u" auto-fill-mode "auto-fill mode")
    ("W" web-mode "web mode")
    ("X" rjsx-mode "rjsx mode")
    ("J" js-mode "js mode"))

    "Personal"
    (("m" goto-MarinMacs "goto config")
    ("s" set-fill-column "set-fill-column")
    ("R" restart-emacs "restart Emacs")
    ("e" eval-buffer "eval buffer")
    ("c" compile "compile"))))
#+END_SRC
*** Org (for org mode)
    #+begin_src emacs-lisp

  (defhydra hydra-org (:color blue :columns 4)
    " ORG "
    ("o" org-open-at-point "open link")
    ("c" org-toggle-comment "comment")
    ("i" org-time-stamp "time stamp")
    ("d" org-export-dispatch "export dispatch")
    ("p" org-priority "priority")
    ("t" org-todo "todo state")
    ("a" org-todo-list "agenda")
    ("l" org-show-todo-tree "show todo tree")
    ("m" marinov/enter-eval "enter and eval")
    ("s" org-edit-special "edit special")
    ("x" org-edit-src-exit "exit special")
    ("n" marinov/jump-to-notes "goto notes")
    ("D" marinov/goto-org-directory "goto org directory")
    ("q" nil "quit"))
    #+end_src
*** Bookmark (managing bookmarks)
    #+begin_src emacs-lisp
  (defhydra hydra-bookmark (:color blue :columns 2)
    "📒 Bookmarks 📒"
    ("c" counsel-bookmark "counsel")
    ("j" bookmark-jump "jump")
    ("l" bookmark-bmenu-list "list")
    ("s" bookmark-set "set")
    ("o" bookmark-set-no-overwrite "set no overwrite") 
    ("q" nil "quit" :color blue))
    #+end_src
* LSP
 :PROPERTIES:
 :CUSTOM_ID: lsp
 :END:
 - LSP stands for Language Server Protocal and makes setting up autocompletion and syntax checking easy. 
 - Check the [[https://github.com/emacs-lsp/lsp-mode][Official Repo]] to see what to install for your preferred development language
 - lsp-ui (UI integrations for lsp-mode)
 - lsp-java (java seems to require its own package for lsp)
#+BEGIN_SRC emacs-lisp  
     (use-package lsp-mode
         :ensure t
         :commands (lsp lsp-deferred)
         :hook
         ((c++-mode c-mode css-mode yaml-mode json-mode js-mode js2-mode rjsx-mode typescript-mode web-mode) . lsp-deferred)
         :bind
         (:map evil-normal-state-map
           ("gy" . lsp-find-type-definition)
           ("gh" . lsp-describe-thing-at-point))
         :custom
         (lsp-auto-guess-root nil)
         (lsp-log-io nil)
         (lsp-idle-delay 0.3)
         (lsp-eldoc-enable-hover nil) ;; graphical bloat imo, but can be good
         (lsp-signature-auto-activate nil) ;; (This tends to cause problems and is SUPER slow ESP on MS Windows) you could manually request them via 'lsp-signature-activate'
         (lsp-headerline-breadcrumb-enable nil) ;; graphical bloat, don't need but useful to the right person
         (lsp-enable-folding nil)
         (lsp-enable-text-document-color nil)
         (lsp-file-watch-threshold 5000)
         (lsp-prefer-flymake nil)
         (lsp-io-messages-max nil)
         :config
         (add-hook 'after-init-hook
                     #'(lambda () ;; in case I disable lsp-ui remap g prefix keys to regular lsp
                         (unless (package-installed-p 'lsp-ui)
                           (define-key evil-normal-state-map (kbd "gd") 'lsp-find-definition)
                           (define-key evil-normal-state-map (kbd "gi") 'lsp-goto-implementation)
                           (define-key evil-normal-state-map (kbd "gr") 'lsp-find-references)))))

     (use-package lsp-ui
         :ensure t
         :commands lsp-ui-mode
         :hook (lsp-mode . lsp-ui-mode)
         :bind
         (:map evil-normal-state-map
           ("gd" . lsp-ui-peek-find-definitions)
           ("gi" . lsp-ui-peek-find-implementation)
           ("gr" . lsp-ui-peek-find-references))
         (:map lsp-ui-peek-mode-map
           ("M-j" . lsp-ui-peek--select-next)
           ("M-k" . lsp-ui-peek--select-prev))
         :custom
         (lsp-ui-doc-enable t)
         (lsp-ui-doc-position 'at-point)
         (lsp-ui-doc-include-signature t)
         (lsp-ui-doc-use-childframe t)
         (lsp-ui-doc-show-with-cursor nil)
         (lsp-ui-doc-show-with-mouse t)
         (lsp-ui-sideline-enable t)
         (lsp-ui-sideline-ignore-duplicates t)
         (lsp-ui-sideline-show-diagnostics t)
         (lsp-ui-sideline-show-symbol nil)
         (lsp-ui-sideline-show-hover nil)
         (lsp-ui-peek-enable t)
         (lsp-ui-peek-list-width 60)
         (lsp-ui-peek-peek-height 25))

   (use-package lsp-treemacs
       :after treemacs lsp-mode
       :ensure t
       :config (lsp-treemacs-sync-mode t))

  (use-package lsp-pyright
      :ensure t
      :hook ((python-mode python-ts-mode) . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))

   (use-package lsp-java
       :disabled
       :hook ((java-mode java-ts-mode) . lsp-deferred))
       ;; :config ;; TODO: properly configure this if I ever use Java / Or don't use this at all
       ;; (setq lsp-java-vmargs
       ;;         (list
       ;;            "-noverify"
       ;;            "-Xmx1G"
       ;;            "-XX:+UseG1GC"
       ;;            "-XX:+UseStringDeduplication"
       ;;            "-javaagent:/path/to/lombok-1.18.6.jar"))) ;; lombok support (TODO: make lombok jar a variable)
#+END_SRC
* DAP
 :PROPERTIES:
 :CUSTOM_ID: dap
 :END:
- DAP stands for Debug Adapter Protocal works similiarly to LSP but for debugging
- Repo: https://github.com/emacs-lsp/dap-mode (includes everything you need to install for your desired development language)
#+BEGIN_SRC emacs-lisp
  ;; only installing because dap-mode requires it
  (use-package posframe :ensure t)

  (use-package dap-mode
      :ensure t
      :after hydra
      :hook
      (lsp-mode . (lambda () (dap-mode t) (dap-ui-mode t) (dap-tooltip-mode 1) (tooltip-mode 1)))
      :config
      (add-hook 'dap-stopped-hook
      (lambda (arg) (call-interactively #'dap-hydra)))) ;; enable hydra on breakpoint stop

#+END_SRC
* Development
 :PROPERTIES:
 :CUSTOM_ID: development
 :END:
** C-Cpp
 :PROPERTIES:
 :CUSTOM_ID: c-cpp
 :END:
- Clangd Language Server: https://clang.llvm.org/extra/clangd/Installation.html
- Cpp extras (mostly optional)
  - [[https://www.google.com/search?q=cmake&oq=cmake&aqs=chrome..69i57j0l6j69i65.645j0j4&client=ubuntu&sourceid=chrome&ie=UTF-8][Cmake]]
  - [[https://llvm.org/][llvm]]
  - [[https://clang.llvm.org/][Clang]]
*** Settings
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :init
    (setq-default c-basic-offset 4))

  (use-package cpp
    :config
    ;; disable other checkers since we only want to utilize clangd language server
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)))

  ;; enable modern font lock for >=c++11
  (use-package modern-cpp-font-lock
      :ensure t
      :diminish modern-c++-font-lock-mode
      :hook (c++-mode-hook . modern-c++-font-lock-mode))
#+END_SRC
*** Debugging
Still experimenting with this, native gdb in emacs is also really good 
#+BEGIN_SRC emacs-lisp
(use-package dap-gdb-lldb
  :ensure nil
  :after dap-mode
  :config
  (dap-register-debug-template
  "GDB config"
  (list :type "gdb"
        :request "launch"
        :name "GDB::Run"
        :target "test"
        :program "test"
        :cwd "/home/marin/Projects")))

#+END_SRC
*** Clang-Format
 - Formats your C++ code
 - Documentation: https://clang.llvm.org/docs/ClangFormat.html
 - You should also search how to install *clang-format* on your specific OS
#+BEGIN_SRC emacs-lisp
  (use-package clang-format 
     :ensure t)
#+END_SRC
** Python
 :PROPERTIES:
 :CUSTOM_ID: python
 :END:
- Python-pip: https://pip.pypa.io/en/stable/
- Python Language Server: https://pypi.org/project/python-language-server/
- Alt Language Server(Need =lsp-pyright= package for it): https://github.com/microsoft/pyright
How to install particular language server
 #+BEGIN_SRC markdown
 python -m pip install LANGUAGE_SERVER_OF_CHOICE
 #+END_SRC
*** Settings
#+BEGIN_SRC emacs-lisp
  (use-package python
      :custom
      (python-indent-guess-indent-offset t)
      (python-indent-guess-indent-offset-verbose nil)
      :config
      (setq-default python-basic-offset 4) 
      (setq-default python-indent-offset 4))

  ;; venv support
  (use-package pyvenv
      :ensure t
      :config
      (pyvenv-mode t))

 ;; if you need virtualenv support 
(use-package virtualenvwrapper
   :disabled
   :config
   (venv-initialize-interactive-shells)
   (venv-initialize-eshell))

  ;; python formatter of choice
  (use-package python-black
      :after python
      :ensure t)
#+END_SRC
*** Debugging
Note: the template is meant to be edited to personal preferences
#+BEGIN_SRC emacs-lisp
(use-package dap-python
  :ensure nil
  :after dap-mode
  :config
  (dap-register-debug-template "My App"
  (list :type "python"
        :args "-i"
        :cwd nil
        :env '(("DEBUG" . "1"))
        :target-module (expand-file-name "~/src/myapp/.env/bin/myapp")
        :request "launch"
        :name "My App")))
#+END_SRC
 :PROPERTIES:
 :CUSTOM_ID: python
 :END:
** Web-Development 
 :PROPERTIES:
 :CUSTOM_ID: web-development
 :END:
 Language servers install command (Might not be necessary as LSP sometimes installs it for you): 
 #+BEGIN_SRC markdown
 npm i -g typescript-language-server vscode-json-languageserver vscode-html-languageserver-bin yaml-language-server vscode-css-languageserver-bin bash-language-server
 #+END_SRC
*** Web-Dev Essentials
 - Web-mode is an Autonomous emacs major-mode for editing web templates. 
 - Essential for web-development. Highlighting, auto-closing tags, just great.
 - Official Website: http://web-mode.org/
#+BEGIN_SRC emacs-lisp
(use-package web-mode
    :ensure t
    :mode
    (("\\.html?\\'"      . web-mode)
    ("\\.phtml\\'"       . web-mode)
    ("\\.tpl\\.php\\'"   . web-mode)
    ("\\.blade\\.php\\'" . web-mode)
    ("\\.[agj]sp\\'"     . web-mode)
    ("\\.as[cp]x\\'"     . web-mode)
    ("\\.erb\\'"         . web-mode)
    ("\\.ejs\\'"         . web-mode)
    ("\\.mustache\\'"    . web-mode)
    ("\\.djhtml\\'"      . web-mode))
    :custom
    ;; Indentation
    (web-mode-attr-indent-offset 2)
    (web-mode-markup-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-css-indent-offset 2)
    ;; Auto-closing
    (web-mode-auto-close-style 2)
    (web-mode-enable-auto-pairing t)
    (web-mode-enable-auto-quoting t)
    ;; Highlighting
    (web-mode-enable-current-column-highlight t)
    (web-mode-enable-current-element-highlight t)
    :config
    (setq web-mode-enable-engine-detection t))

    (setq-default css-indent-offset 2) ;; web mode for some reason cancels css autocomplete so I have to configure css separately
#+END_SRC
rainbow mode for displaying hex colors, rainbow-delimeters for coloring parenthesis
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode . rainbow-delimiters-mode)))

  (use-package rainbow-mode 
      :ensure t
      :hook prog-mode org-mode)
#+END_SRC
- This is what I like to use to format during web development
- In your js/ts project you would run =npm i prettier= to add the dependency or the install globally with the =-g= flag
- You can hook specific modes or enable globally if you want to format on save but I prefer to do it manually through my hydra
#+BEGIN_SRC emacs-lisp
  (use-package prettier
      :ensure t) 
#+END_SRC
*** Modes
- These are modes related to web-dev that I have worked with 
- If you are a *react.js* developer, I *highly recommend* hooking *rjsx-mode* to *.js* files as well
  - if you are a *node.js* developer and/or *vanilla js* developer, I found the current setup with web mode to be better for syntax highlighting
  - in *hydra-utility* located in the [[#hydra][Hydra]] section there are keybindings to switch between rjsx and web mode easily
#+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
          :ensure t
          :mode
          (("\\.jsx\\'"  . rjsx-mode))
          :init
          (setq-default rjsx-basic-offset 2))
    
      (use-package json-mode
          :ensure t
          :commands json-mode
          :init
          (setq-default js-indent-level 2))

      (use-package yaml-mode
          :ensure t
          :commands yaml-mode
          :mode (("\\.yml\\'" . yaml-mode)
                 ("\\.yaml\\'" . yaml-mode)))
             
      (use-package graphql-mode
          :ensure t
          :commands graphql-mode
          :mode
          (("\\.\\(gql\\|graphql\\)\\'" . graphql-mode)))
    
      (use-package dockerfile-mode 
          :ensure t
          :commands dockerfile-mode
          :mode
          (("Dockerfile'"       . dockerfile-mode)
          ("\\.Dockerfile\\'"  . dockerfile-mode)))
    
      (use-package csv-mode 
          :ensure t
          :commands csv-mode)
#+END_SRC
*** Skewer
'live web-development in emacs'
#+BEGIN_SRC emacs-lisp
  (use-package skewer-mode
      :disabled
      :ensure t
      :commands skewer-mode run-skewer
      :config
      (add-hook 'js2-mode-hook 'skewer-mode)
      (add-hook 'js-mode-hook 'skewer-mode)
      (add-hook 'css-mode-hook 'skewer-css-mode)
      (add-hook 'html-mode-hook 'skewer-html-mode)
      (skewer-setup))
    
#+END_SRC
*** Impatient-Mode
'See the effect of your HTML as you type it.'
   #+BEGIN_SRC emacs-lisp
  (use-package impatient-mode
      :disabled
      :ensure t)  
   #+END_SRC
*** Emmet 
 More on emmet: https://www.emmet.io/
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
      :disabled
      :hook
      ((css-mode  . emmet-mode)
      (php-mode  . emmet-mode)
      (sgml-mode . emmet-mode)
      (rjsx-mode . emmet-mode)
      (web-mode  . emmet-mode)))
#+END_SRC
** JavaScript-TypeScript
 :PROPERTIES:
 :CUSTOM_ID: JavaScript-TypeScript
 :END:
- JavaScript/TypeScript language server: https://github.com/theia-ide/typescript-language-server
- Select =ts-ls= when prompted which server to install 
*** Node Path
Adds the node_modules/.bin directory to the buffer exec_path.
#+BEGIN_SRC emacs-lisp
  (use-package add-node-modules-path
      :ensure t
      :hook 
      ((web-mode . add-node-modules-path)
      (rjsx-mode . add-node-modules-path)))
#+END_SRC
*** Debugging
 Any kind of setup can be found in the dap repo that was mentioned previously...
*** Front-end
#+BEGIN_SRC emacs-lisp
  ;; debugging in chrome
  (use-package dap-chrome
      :ensure nil
      :after dap-mode)
  
  ;; debugging in firefox
  (use-package dap-firefox
      :ensure nil
      :after dap-mode)
#+END_SRC
*** Back-end
#+BEGIN_SRC emacs-lisp
  (use-package dap-node
      :ensure nil
      :after dap-mode)
#+END_SRC
*** Js2-mode
- A 'better' mode for editing javascript files. Can have performance issues and errors 
- I am using web mode for js files now and it seems to be a bit better for syntax highlighting at least 
- Consider also using *js-mode* as it supports a lot more features in Emacs versions >= 27.05
- Repo to keep track of how the mode is doing: https://github.com/mooz/js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
      :ensure t
      :config 
      (setq js2-strict-missing-semi-warning nil)
      (setq-default js2-basic-offset 2)) ;; set indentation to 2
#+END_SRC
 :PROPERTIES:
 :CUSTOM_ID: ts
 :END:
*** TS
All for typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
      :ensure t
      :mode "\\.ts\\'"
      :config
      (setq-default typescript-indent-level 2)) ;; indent 2 spaces by default
#+END_SRC
** Elixir
 :PROPERTIES:
 :CUSTOM_ID: elixir
 :END:
#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
      :ensure t
      :hook (elixir-mode . lsp-deferred))

  ;; inferior repl mode
  (use-package inf-elixir
      :ensure t
      :hook (elixir-mode . inf-elixir-minor-mode))
#+END_SRC
** Go
 :PROPERTIES:
 :CUSTOM_ID: go
 :END:
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
      :ensure t
      :hook (go-mode . lsp-deferred))
#+END_SRC
** Rust
 :PROPERTIES:
 :CUSTOM_ID: rust
 :END:
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
      :ensure t)

  (use-package rustic
      :ensure t
      :hook (rust-mode . lsp-deferred))
#+END_SRC
* Diminish
 :PROPERTIES:
 :CUSTOM_ID: diminish
 :END:
- This hides modes from your modeline, add the specific mode you do not want to see in the modeline
- Usually the =:diminish= keyword takes care of it, but some modes seem to only diminish if they are put here.
  #+begin_src emacs-lisp
    (use-package diminish
        :ensure t
        :init
        (diminish 'auto-revert-mode)
        (diminish 'page-break-lines-mode)
        (diminish 'abbrev-mode))
  #+end_src
