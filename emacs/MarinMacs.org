#+TITLE: MarinMacs Configuration File
#+AUTHOR: Marin P. Marinov  
#+EMAIL: marin.marinov@macaulay.cuny.edu
#+LANGUAGE: en
#+TAGS: Emacs
#+DESCRIPTION: My emacs config for software development

* Org-Archive
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC
* Restart-Emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
    :ensure t
    :config
    (global-set-key (kbd "<f5>") 'restart-emacs)) ;; To restart emacs
#+END_SRC
* General Settings
#+BEGIN_SRC emacs-lisp

;; Indententation 
(setq c-basic-offset 4)       ;; indents 4 chars
(setq tab-width 4)            ;; and 4 char wide for TAB
(setq indent-tabs-mode nil)   ;; And force use of spaces
(setq sgml-quick-keys 'close) ;; html autoclose
(setq default-frame-alist '((font . "Fira code-14")))
;; syntax highlighthing & auto-close braces
(global-font-lock-mode 1)  ;; syntax highlighting
(electric-pair-mode)       ;; auto closing brackets

;; Quick y/n prompt & Disable menu bars
(fset 'yes-or-no-p 'y-or-n-p) ;; change yes or no to y or n
(menu-bar-mode -1) ;; disable menu bar
(toggle-scroll-bar -1) ;; disable scroll bar
(tool-bar-mode -1) ;; disable tool bar

;; Disable annoying back up files (comment if you want to enable backup files) 
(setq make-backup-files nil) ;; stop creating backup~ files
(setq auto-save-default nil) ;; stop creating autosave# files
(setq create-lockfiles nil)  ;; stop creating any # files
#+END_SRC
* Personal Keybindings
#+BEGIN_SRC emacs-lisp

;;;; My personal keybindings, you change these anyway you like 

;; Movement (DISABLED if evil-mode is on)
(global-set-key (kbd "C-S-p") 'beginning-of-buffer) ;; top of file DISABLED by evil 
(global-set-key (kbd "C-S-n") 'end-of-buffer) ;; end of file DISABLED by evil 
(global-set-key (kbd "M-m") 'move-beginning-of-line) ;; moves beginning of the line DISABLED by evil
(global-set-key (kbd "C-a") 'back-to-indentation) ;; moves beginning of the first char DISABLED by evil

;; Compiling and Buffers
(global-set-key (kbd "s-r") 'compile) ;; compile code
(global-set-key (kbd "C-c C-e") 'eval-buffer) ;; evaluate the buffer (mini reload)
(global-set-key (kbd "C-c b") 'switch-to-prev-buffer)
(global-set-key (kbd "C-c k") 'kill-current-buffer)
 
;; Commenting
(global-set-key (kbd "C-?") 'comment-region) ;; comment
#+END_SRC
* Dashboard 
#+BEGIN_SRC emacs-lisp
(use-package dashboard 
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "MarinMacs")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((recents  . 5)
                           (bookmarks . 5)
			   (agenda . 5)
                           (projects . 5))))
#+END_SRC

* Evil-Mode
#+BEGIN_SRC emacs-lisp
;;;; Package needed to enable vim bindings...

(use-package evil
  :ensure t
  :config
  (evil-mode 1))
 

;;;; Evil Support packages

;; Surround
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

;; Evil multiple-cursors
(use-package evil-mc
  :ensure t
  :config
  (global-evil-mc-mode  1))

 ; NERD Tree Overrid
 (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
    (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
    (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
    (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
    (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
    (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
    
  ; Evil magit
 (use-package evil-magit
      :ensure t)
#+END_SRC
* Themes
#+BEGIN_SRC emacs-lisp
;; You can uncomment any themes that you like
;; BE AWARE: emacs can have multiple themes on at the same time
;; Multiple themes can mix into a super theme
;; Some themes do not mix well which is why I commented some themes

;(use-package zerodark-theme
;   :ensure t)
 
;(use-package minimal-theme
;    :ensure t
;    :config
;    (load-theme 'minimal t))
   
;use-package nord-theme
; :ensure t
; :config
; (load-theme 'nord t))

;; (use-package zenburn-theme
;;   :ensure t)
    
;; (use-package poet-theme
;;    :ensure t)

;;(use-package monokai-theme
;;    :ensure t
;;    :config (load-theme 'monokai t))
 
(use-package spacemacs-common
    :ensure spacemacs-theme
    :config (load-theme 'spacemacs-dark t))

;; (use-package gruvbox-theme
;;    :ensure t)

;;(use-package base16-theme
;;  :ensure t
;;  :config 
;;  (load-theme 'base16-ocean t))

;;(use-package jbeans-theme
;;    :ensure t)
;;    :config
;;    (load-theme 'jbeans t))

;; (use-package solarized-theme
;;     :ensure t
;;     :config
;;     (load-theme 'solarized-dark t))

 
;;(use-package planet-theme
;;   :ensure t)
;;   :config 
;;   (load-theme 'planet t))

;;(load-theme 'zerodark t)
;;(zerodark-setup-modeline-format)
#+END_SRC
* Modeline
#+BEGIN_SRC emacs-lisp
  ;;  You can pick one of these, simply uncomment the one you want to try and comment the rest  
   
  ;;  Telephone-line
   
;(use-package telephone-line
;    :ensure t
;    :config
;    (setq telephone-line-lhs
;        '((evil   . (telephone-line-evil-tag-segment))
;         (accent . (telephone-line-vc-segment
;                    telephone-line-erc-modified-channels-segment
;                    telephone-line-process-segment))
;         (nil    . (telephone-line-minor-mode-segment
;                    telephone-line-buffer-segment))))
;    (setq telephone-line-rhs
;          '((nil    . (telephone-line-misc-info-segment))
;           (accent . (telephone-line-major-mode-segment))
;           (evil   . (telephone-line-airline-position-segment))))
;    telephone-line-mode 1)
;
;; Spaceline
  
(use-package spaceline
   :ensure t
   :config
   (require 'spaceline-config)
   (setq powerline-default-separator (quote arrow))
   (spaceline-highlight-face-evil-state) ;; evil mode only
   (spaceline-spacemacs-theme))
    
;; lightweight doom theme
;(use-package doom-modeline
;      :ensure t
;      :hook (after-init . doom-modeline-mode))

;; Powerline

  ;;  (use-package powerline
  ;;        :ensure t
  ;;        :config
  ;;        (powerline-default theme))   
  ;;   

;; Other themes with powerline
    
  ;;     (powerline-center-theme)
  ;;     (powerline-vim-theme)
  ;;     (powerline-center-evil-theme)
  ;;     (powerline-nano-theme)

#+END_SRC

* Emacs Enhancements 
** Which-Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	:ensure t 
	:config
	(which-key-mode))
#+END_SRC
** Ace-Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
     :ensure t
     :init 
     (global-set-key (kbd "M-o") 'ace-window)
     (setq aw-background nil))
#+END_SRC
** Debugger
#+BEGIN_SRC emacs-lisp
;; Debugger
(global-set-key (kbd "C-c d") 'gdb)
(setq gdb-many-windows t) ;; have multiple windows when debugging
(setq  gdb-show-main t )  ;; Non-nil means display source file containing the main routine at startup
#+END_SRC
** Ivy-Integration 
#+BEGIN_SRC emacs-lisp

;; Ivy
(use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))

;; Counsel
(use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
    :map ivy-minibuffer-map
    ("M-y" . ivy-next-line))
    :config
    (setq counsel-find-file-ignore-regexp "\\(?:^[#.]\\)\\|\\(?:[#~]$\\)\\|\\(?:^Icon?\\)"
          counsel-describe-function-function #'helpful-callable
          ncounsel-describe-variable-function #'helpful-variable
          ;; Add smart-casing (-S) to default command arguments:
          counsel-rg-base-command "rg -S --no-heading --line-number --color never %s ."
          counsel-ag-base-command "ag -S --nocolor --nogroup %s"
          counsel-pt-base-command "pt -S --nocolor --nogroup -e %s"
          counsel-find-file-at-point t))


;; Swiper 
(use-package swiper
    :ensure t
    :bind 
    (("C-s" . swiper)
    ("C-r" . swiper)
    ("M-x" . counsel-M-x)
    ("C-c g" . counsel-git)
    ("C-c C-r" . ivy-resume)
    ("C-x C-f" . counsel-find-file))
    :config
    (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))


#+END_SRC
** Ranger
#+BEGIN_SRC emacs-lisp
;; Ranger
(use-package ranger
    :ensure t
    :config
    (ranger-override-dired-mode t)
    (global-set-key (kbd "C-c r") 'ranger)) ;; start ranger from file
#+END_SRC
* Project Management
#+BEGIN_SRC emacs-lisp
;; Projectile-mode NOTE: s stands for command on MacOS, windows button for Windows
(use-package projectile
    :ensure t
    :bind
    (("C-c p" . projectile-command-map)
    ("s-d" . projectile-find-dir)
    ("s-f" . projectile-find-file)
    ("s-g" . projectile-grep))
    :config
    (setq projectile-completion-system 'ivy)
    (projectile-mode +1))

;; Counsel-Projectile
 (use-package counsel-projectile
    :ensure t)

#+END_SRC
* Shell
   #+BEGIN_SRC emacs-lisp
(use-package better-shell
    :ensure t
    :bind 
    (("C-`" . better-shell-shell) ;; open terminal
    ("C-;" . better-shell-remote-open)))

(use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x)) ;; check if its mac
    (exec-path-from-shell-initialize)))

;; Eshell 
(global-set-key (kbd "C-~") 'eshell) ;; terminal alternative in emacs
   #+END_SRC

* Global Convenience
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
    :ensure t
    :init 
    (yas-global-mode 1)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "C-c o") yas-maybe-expand)
    (define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand))

(use-package yasnippet-snippets 
    :ensure t)
#+END_SRC 
** FlyCheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
     :ensure t
     :init
     (global-flycheck-mode t))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
    :ensure t
    :bind("C-n" . company-select-next)
    :config
    (define-key company-active-map (kbd "M-n") nil) ; old selection key
    (define-key company-active-map (kbd "<tab>") #'company-select-next) ; make tab new selection key
    (setq company-idle-delay 0) ;; faster autcompletion
    (setq company-minimum-prefix-length 3) ;; show completions after 3 chars
    (setq company-selection-wrap-around t)
    (setq global-company-mode t)) 
#+END_SRC

** Undo-Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC
* Org & Markdown
** Enable Org-Mode
#+BEGIN_SRC emacs-lisp
(use-package org 
   :ensure t
   :pin org)
#+END_SRC
** Org Bullets
#+Begin_SRC emacs-lisp
(use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
#+END_SRC
** Latex 
#+BEGIN_SRC emacs-lisp
;(use-package tex
;    :ensure auctex)

;; Settings 
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-save-query nil)

;; Spellchecker and Linter for Latex
(add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
(add-hook 'LaTeX-mode-hook 'flycheck-mode)
#+END_SRC
* Coding Productivity 
** Beacon 
#+BEGIN_SRC emacs-lisp
(use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp
;; Pretty Icons
(use-package all-the-icons
    :ensure t)

;; Neotree
(use-package neotree
    :ensure t
    :defer t
    :bind ("C-c t" . neotree-toggle)
    :config (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC
** Iedit
#+BEGIN_SRC emacs-lisp
(use-package iedit
    :ensure t
    :bind (("C-c c" . iedit-mode)))
#+END_SRC
** Dump-Jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
    :bind 
    (("C-M-g" . dumb-jump-go-other-window)
    ("M-g j" . dumb-jump-go)
    ("M-g b" . dumb-jump-back)
    ("M-g i" . dumb-jump-go-prompt)
    ("M-g x" . dumb-jump-go-prefer-external)
    ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config 
    (setq dumb-jump-selector 'ivy) 
    :ensure)
#+END_SRC
* Github Integration
#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t
    :bind
    (("C-x g" . magit-status)
    ("C-x M-g" . magit-dispatch-popup)))
#+END_SRC
* LSP
** config
#+BEGIN_SRC emacs-lisp  
(use-package lsp-mode
  :ensure t
  :config
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq lsp-idle-delay 0.250)
  (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error"))
  (add-hook 'c++-mode-hook #'lsp)
  (add-hook 'python-mode-hook #'lsp)
  (add-hook 'js2-mode-hook #'lsp)
  (add-hook 'json-mode-hook #'lsp)
  (add-hook 'web-mode-hook #'lsp)
  (add-hook 'yaml-mode-hook #'lsp)
  (add-hook 'typescript-mode-hook #'lsp))
  
(use-package lsp-ui
 :requires lsp-mode flycheck
 :ensure t
 :config
 (setq lsp-ui-doc-enable t
       lsp-ui-doc-use-childframe t
       lsp-ui-doc-position 'top
       lsp-ui-doc-include-signature t
       lsp-ui-sideline-enable nil
       lsp-ui-flycheck-enable t
       lsp-ui-flycheck-list-position 'right
       lsp-ui-flycheck-live-reporting t
       lsp-ui-peek-enable t
       lsp-ui-peek-list-width 60
       lsp-ui-peek-peek-height 25)

 (add-hook 'lsp-mode-hook 'lsp-ui-mode))
  
(use-package company-lsp
  :requires company
  :ensure t
  :config
  (push 'company-lsp company-backends)
   ;; Disable client-side cache because the LSP server does a better job.
  (setq company-transformers nil
        company-lsp-async t
        company-lsp-cache-candidates nil
	company-lsp-enable-snippet t
	company-lsp-enable-recompletion t))

#+END_SRC
* C++
** Modern Font Lock
#+BEGIN_SRC emacs-lisp
(use-package modern-cpp-font-lock
    :ensure t
    :config
    (modern-c++-font-lock-global-mode t))
#+END_SRC
** Clang-Format
#+BEGIN_SRC emacs-lisp
(use-package clang-format 
    :ensure t
    :bind 
    (("C-c u" . clang-format-region) ;; format current line
    ("C-c f" . clang-format-buffer)) ;; format entire file
    :config
    (setq clang-format-style-option ".clang-format")) 
 ;; (setq clang-format-style-option "llvm")) use this option if you do not have a .clang-format file
#+END_SRC
* Python
** Version
#+BEGIN_SRC emacs-lisp
(setq py-python-command "python3")
(setq python-shell-interpreter "python3")
#+END_SRC
** Elpy
#+BEGIN_SRC emacs-lisp
;;(use-package elpy
;;   :ensure t
;;   :config 
;;   (elpy-enable))
#+END_SRC
** Virtualenv
#+BEGIN_SRC emacs-lisp
;; Uncomment if you need them
;;(use-package virtualenv
;;   :ensure t)
;;
;;(use-package virtualenvwrapper
;;   :ensure t
;;   :config)
;;   ;;(venv-initialize-interactive-shells)
;;   ;;(venv-initialize-eshell))
#+END_SRC
* Web-Development 
** Web-Mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
    :ensure t
    :after (add-node-modules-path)
    :config
	   (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.jsx?$\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
	   (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
	   (setq web-mode-engines-alist
		 '(("django"    . "\\.html\\'")))
	   (setq web-mode-ac-sources-alist
	   '(("css" . (ac-source-css-property))
	   ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
           ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
	 ;; Emmet
	 (add-hook 'web-mode-hook 'emmet-mode) ;; triggers with C-RET
	 ;; Indentation
	 (setq web-mode-markup-indent-offset 4)
	 (setq web-mode-code-indent-offset 4)
	 (setq web-mode-css-indent-offset 4)
	 ;; Auto-closing
	 (setq web-mode-auto-close-style 2)
	 (setq web-mode-tag-auto-close-style 2)
	 (setq web-mode-enable-auto-closing t)
	 (setq web-mode-enable-auto-quoting t)
	 (with-eval-after-load 'web-mode
	 (define-key web-mode-map (kbd "C-c h") 'web-mode-element-close)) ;; auto-close tag help
	 ;; Highlighting
	 (setq web-mode-enable-current-column-highlight t)
	 (setq web-mode-enable-current-element-highlight t))

;; enable css coloring
(use-package rainbow-mode 
    :ensure t
    :mode "\\.css\\'")

(use-package prettier-js
    :ensure t
    :config 
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (add-hook 'web-mode-hook 'prettier-js-mode))

#+END_SRC
** Modes
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
    :ensure t)
    
(use-package json-mode
    :ensure t)

(use-package yaml-mode
    :ensure t)
    
(use-package dockerfile-mode
    :ensure t)
#+END_SRC
** Skewer
#+BEGIN_SRC emacs-lisp
(use-package skewer-mode
    :ensure t
    :commands skewer-mode run-skewer
    :config
    (add-hook 'js2-mode-hook 'skewer-mode)
    (add-hook 'css-mode-hook 'skewer-css-mode)
    (add-hook 'html-mode-hook 'skewer-html-mode)
    (skewer-setup))
    
#+END_SRC
** Impatient-Mode
   #+BEGIN_SRC emacs-lisp
   (use-package impatient-mode
       :ensure t)  
   #+END_SRC
** Emmet 
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode)) ;; enable Emmet's css abbreviation.)
#+END_SRC

* JavaScript/TypeScript
** Node Path
#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path
   :ensure t
   :config
   ;; automatically run the function when web-mode starts
   (eval-after-load 'web-mode
     '(add-hook 'web-mode-hook 'add-node-modules-path)))
#+END_SRC
** Js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    :hook (j2-mode. js2-imenu-extras-mode))

(use-package js2-refactor
    :ensure t
    :hook (js2-mode . js2-refactor-mode)
    :config
    (js2r-add-keybindings-with-prefix "C-c C-r")
    (define-key js2-mode-map (kbd "C-k") #'js2r-kill))

(use-package xref-js2
    :ensure t)

#+END_SRC
** TIDE
#+BEGIN_SRC emacs-lisp
;; enable typescript in emacs
(use-package typescript-mode
    :ensure t)

;; typescript integrated development environment
(use-package tide
    :ensure t
    :config
    (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))
    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)
    ;; formats the buffer before saving
    (add-hook 'before-save-hook 'tide-format-before-save)
    (add-hook 'typescript-mode-hook #'setup-tide-mode))
#+END_SRC
