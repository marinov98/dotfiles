#+TITLE: MarinMacs Configuration File
#+AUTHOR: Marin P. Marinov  
#+EMAIL: marin.marinov@macaulay.cuny.edu
#+LANGUAGE: en
#+TAGS: Emacs
#+DESCRIPTION: My emacs config for software development

* Contact
- Email me if there are any issues/questions/things that can be better: marin.marinov@macaulay.cuny.edu
** Inspiration:
- I became inspired to write this after I configured my emacs init file to the point where I could comftorably write C++, Python, and JavaScript code as well as take notes in Org mode.
** Purpose:
- Initially, I made this repo for myself to keep track of my configurations...
- Now I want to make it more of a guide for anyone trying to switch to emacs whether its from another editor and/or is confused about what packages to install and how to configure.
- Make a guide that welcomes anyone from any editor.
** Who Is This for?
- *Vim users* wanting to switch and use the power of emacs while keepings their vim keybindings
- Anyone wanting to use Emacs for its *own keybindings* and extensibility but hates configuring and wants an out of the box experience
- People who want more productivity but are limited because of their current text editor
- People who already use emacs and maybe want to see if there is anything new they can learn from my config
- Me whenever I forget or want to reference something
** Why Make This Into More Of A Guide?
- Emacs is extremely powerful but has a ton of packages and it can be really confusing to pick the right ones, much less configure them
- Installing each package requires going to different sites and/or blogs to see how each individual one works, its better to have all the information you need in one place 
- Not everybody likes spending time customizing and configuring, they like things that work right out of the box. However, everybody likes speed and Emacs provides that and the configuration should not be what keeps people using editors such as emacs or vim
- What if you are a *Vim user* looking to switch to emacs but keep the powerful vim bindings? My emacs works with evil-mode!
- I just really like to have my stuff online in case event XYZ happens with my machine 
* Notes-Before-Beginning
- I include as much as I can, as I want this guide to be useful to both people who never touched emacs as well as emacs veterans
- Any errors you get can be googled and every package can also be checked online 
- Depending on how you installed emacs, certain packages might be preinstalled into it 
- When you see ```RET``` it means hit the ENTER key
- *In emacs C = ctrl, M = alt, S = shift and s (hyper key) = command key (MacOS) windows key(MS-Windows)*
  - Example: ```M-x``` = alt + x  ```C-x C-f``` = ctrl + x ctrl + f
- If you wish to browse through Emac's packages ```M-x package-list-packages RET``` will open up the package list
  - Additionally, you can run ```M-x package-install RET package_name RET``` if you know the exact package that you want
  - Generally , `use-package` (described below) takes care of automating package installation
- Once again, if you just want to get it over with, simply copy my *init.el* and *MarinMacs.org* (or whatever you want to name your org file) 
- the files should be created inside the ```.emacs.d``` folder which you can create. 
- All the packages should install and configure automatically (power of use-package), *however* you would still have to install the *langauge servers* to enable autocomplete
* Possible-Issues 
- After installing my config on a few different machines (Linux, MacOS, Ms-Windows), my config runs fine, but I have occasionally ran into small issues that can be quickly fixed.
- Run emacs with '--debug-init' flag it should tell you where the error is
- They are rare but they still happen so below are some solutions to them:
** Issue #1: Package cannot load 
- *Possible Solution* run `M-x package-refresh-contents` , if that doesnt work and the package doesnt mean much to you, remove it from the config or look up the package to see if anything has changed, some packages get deleted over time or replaced or become native to emacs and do not to be specified in the config
** Issue #2 : (some word) is void 
- *Possible Solution #1 :* my config is tested, so there should not be anything that stops your emacs file from loading, however sometimes because my config has long lines of code and emacs default size is not that big, emacs indents and the piece of code goes on a new line and is not part of anything so it looks like an error 
- Best thing to do is `C-s` and search for the word and either try to put it in the same line or delete it
- *Possible Solution #2 :* Make sure you have my init.el copied (fix any small indentention issues there) then run `M-x customize RET`, go to faces->basics faces->default change the size of the emacs screen to prevent it from indenting.
* Table of Contents :TOC_3:
- [[#settings][General Settings]]
- [[#keybindings][Personal Keybindings]]
- [[#org-archive][Org-archive]]
- [[#quelpa][Quelpa]]
- [[#restart][Restart-Emacs]]
- [[#dashboard][Dashboard]]
- [[#evil][Evil-mode]]
- [[#themes][Themes]]
- [[#modeline][Modeline]]
- [[#enhancements][Emacs Enhancements]]
  - [[#which-key][Which-Key]]
  - [[#ace-window][Ace-Window]]
  - [[#gdb][GDB]]
  - [[#ivy][Ivy integration]]
  - [[#ranger][Ranger]]
  - [[#all-icons][All-the-icons]]
- [[#projectile][Projectile]]
- [[#shell][Shell]]
- [[#globals][Globals]]
  - [[#snippets][Snippets]]
  - [[#flycheck][Flycheck]]
  - [[#company][Company]]
  - [[#undo-tree][Undo Tree]]
- [[#org-markdown][Org and Markdown]]
- [[#latex][Latex]]
- [[#coding][Coding Productivity]]
  - [[#beacon][Beacon]]
  - [[#neotree][neotree]]
  - [[#iedit][iedit]]
  - [[#dump-jump][Dump-Jump]]
- [[#git][Git]]
- [[#hydra][Hydra]]
- [[#lsp][Language Server Protocal (lsp)]]
- [[#dap][Debug Adapter Protocal (dap)]]
- [[#cpp][C/C++]]
- [[#python][Python]]
- [[#web-dev][Web-Development]]
- [[#js][JavaScript/TypeScript]]

* General Settings 
 :PROPERTIES:
 :CUSTOM_ID: settings
 :END:
I like to use [[https://github.com/tonsky/FiraCode][Fira Code]] font
#+BEGIN_SRC emacs-lisp
  ;; Indentation 
  (setq-default indent-tabs-mode nil)                    ;; disable tabs and use spaces
  (setq-default tab-width 4)                             ;; set default tab width 4 
  (setq backward-delete-char-untabify-method 'hungry)    ;; backspaces entire tab instead of one space at a time
  (setq default-frame-alist '((font . "Fira Code-14")))  ;; set font and font size
  (setq visible-bell t)                                  ;; disable annoying end of buffer sounds
  (electric-pair-mode)                                   ;; auto closing brackets

  ;; Quick y/n prompt & Disable menu bars
  (fset 'yes-or-no-p 'y-or-n-p)                          ;; change yes or no to y or n
  (menu-bar-mode -1)                                     ;; disable menu bar
  (toggle-scroll-bar -1)                                 ;; disable scroll bar
  (tool-bar-mode -1)                                     ;; disable tool bar

  ;; Disable annoying back up files (comment if you want to enable backup files) 
  (setq make-backup-files nil)                           ;; stop creating backup~ files
  (setq auto-save-default nil)                           ;; stop creating autosave# files
  (setq create-lockfiles nil)                            ;; stop creating any # files
#+END_SRC
* Personal Keybindings
 :PROPERTIES:
 :CUSTOM_ID: keybindings
 :END:
My personal keybindings, you change these anyway you like 
#+BEGIN_SRC emacs-lisp
  ;; Movement (some might be disabled by evil mode)
  (global-set-key (kbd "C-S-p") 'beginning-of-buffer)  ;; top of file 
  (global-set-key (kbd "C-S-n") 'end-of-buffer)        ;; end of file DISABLED by evil 
  (global-set-key (kbd "M-m") 'move-beginning-of-line) ;; moves beginning of the line 

  ;; Compiling and Buffers
  (global-set-key (kbd "C-c e") 'compile)              ;; compile code
  (global-set-key (kbd "C-c C-e") 'eval-buffer)        ;; evaluate the buffer (mini reload)
  (global-set-key (kbd "C-c b") 'switch-to-prev-buffer)
  (global-set-key (kbd "C-c n") 'switch-to-next-buffer)
  (global-set-key (kbd "C-c k") 'kill-current-buffer)

#+END_SRC
* Org-Archive
 :PROPERTIES:
 :CUSTOM_ID: org-archive
 :END:
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC
* Quelpa
 :PROPERTIES:
 :CUSTOM_ID: quelpa
 :END:
'Build and install your Emacs Lisp packages on-the-fly and directly from source.'
#+BEGIN_SRC emacs-lisp
(use-package quelpa-use-package
    :ensure t)
#+END_SRC
* Restart-Emacs
 :PROPERTIES:
 :CUSTOM_ID: restart
 :END:
I think I have actually used this package the most... Does exactly what it says
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
    :ensure t
    :config
    (global-set-key (kbd "<f5>") 'restart-emacs)) ;; To restart emacs
#+END_SRC
* Dashboard 
 :PROPERTIES:
 :CUSTOM_ID: dashboard
 :END:
- This package is displayed when you start up emacs without selecting a file. 
- Prerequisites: https://github.com/cask/cask
- After installing cask, learn how to customize it by going here: https://github.com/emacs-dashboard/emacs-dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard 
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "MarinMacs")
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((recents  . 5)
                           (bookmarks . 5)
			               (agenda . 5)
                           (projects . 5))))
#+END_SRC
* Evil-Mode
 :PROPERTIES:
 :CUSTOM_ID: evil
 :END:
 - Packages needed to emulate vim inside Emacs. 
 - Make sure you have [[#undo-tree][undo-tree]] installed 
 - Official Repo for Evil Mode: https://github.com/emacs-evil/evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1))
 
;; Surround
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

;; Evil multiple-cursors
(use-package evil-mc
  :ensure t
  :config
  (global-evil-mc-mode 1))

 ; NeoTree override keybindings, package (neotree) is shown further in the config
 (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
 (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
 (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
 (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
 (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
 (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
 (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
 (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
 (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
    
  ; Evil magit overrides magit keybindings, package (magit) is shown further in the config
 (use-package evil-magit
      :ensure t)
#+END_SRC
* Themes
 :PROPERTIES:
 :CUSTOM_ID: themes
 :END:
** Favorite-Themes
*** Base16 (Contains 20+ themes but these are my top picks)
- base16-ocean 
- base16-oceanicnext 
- base16-tomorrow-night
- base16-solarized-dark/light

*** Colorful and visually pleasing    
- Spacemacs-theme
- Zerodark

*** Easy on the eyes
- Gruvbox
- nord
- Zenburn
- JellyBeans 
- Planet
- solarized-dark (from solarized-theme NOT base16)

*** For Org and any Markdown Language
- Poet
** Customization
You can uncomment any themes that you like here
#+BEGIN_SRC emacs-lisp
;; BE AWARE: emacs can have multiple themes on at the same time
;; Multiple themes can mix into a super theme
;; Some themes do not mix well which is why I commented some themes

;(use-package zerodark-theme
;   :ensure t)
 
;(use-package minimal-theme
;    :ensure t
;    :config
;    (load-theme 'minimal t))
   
;use-package nord-theme
; :ensure t
; :config
; (load-theme 'nord t))

;; (use-package zenburn-theme
;;   :ensure t)
    
;; (use-package poet-theme
;;    :ensure t)

;;(use-package monokai-theme
;;    :ensure t
;;    :config (load-theme 'monokai t))
 
(use-package spacemacs-common
    :ensure spacemacs-theme
    :config (load-theme 'spacemacs-dark t))

;; (use-package gruvbox-theme
;;    :ensure t)

;;(use-package base16-theme
;;  :ensure t
;;  :config 
;;  (load-theme 'base16-ocean t))

;;(use-package jbeans-theme
;;    :ensure t)
;;    :config
;;    (load-theme 'jbeans t))

;; (use-package solarized-theme
;;     :ensure t
;;     :config
;;     (load-theme 'solarized-dark t))

 
;;(use-package planet-theme
;;   :ensure t)
;;   :config 
;;   (load-theme 'planet t))

;;(load-theme 'zerodark t)
;;(zerodark-setup-modeline-format)
#+END_SRC
* Modeline
 :PROPERTIES:
 :CUSTOM_ID: modeline
 :END:
 You can pick one of these, simply uncomment the one you want to try and comment the rest  
#+BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;   
;;  Telephone-line
;;;;;;;;;;;;;;;;;;;;;;   
   
;(use-package telephone-line
;    :ensure t
;    :config
;    (setq telephone-line-lhs
;        '((evil   . (telephone-line-evil-tag-segment))
;         (accent . (telephone-line-vc-segment
;                    telephone-line-erc-modified-channels-segment
;                    telephone-line-process-segment))
;         (nil    . (telephone-line-minor-mode-segment
;                    telephone-line-buffer-segment))))
;    (setq telephone-line-rhs
;          '((nil    . (telephone-line-misc-info-segment))
;           (accent . (telephone-line-major-mode-segment))
;           (evil   . (telephone-line-airline-position-segment))))
;    telephone-line-mode 1)
;


;;;;;;;;;;;;;;;;;;;;;;   
;; Spaceline
;;;;;;;;;;;;;;;;;;;;;;   

(use-package spaceline
   :ensure t
   :config
   (require 'spaceline-config)
   (setq powerline-default-separator (quote arrow))
   (spaceline-highlight-face-evil-state) ;; evil mode only
   (spaceline-spacemacs-theme))
    
;;;;;;;;;;;;;;;;;;;;;;   
;; lightweight doom theme
;;;;;;;;;;;;;;;;;;;;;;   

;(use-package doom-modeline
;      :ensure t
;      :hook (after-init . doom-modeline-mode))

;;;;;;;;;;;;;;;;;;;;;;   
;; Powerline
;;;;;;;;;;;;;;;;;;;;;;   

  ;;  (use-package powerline
  ;;        :ensure t
  ;;        :config
  ;;        (powerline-default theme))   
  ;;   

;; Other themes with powerline
    
  ;;     (powerline-center-theme)
  ;;     (powerline-vim-theme)
  ;;     (powerline-center-evil-theme)
  ;;     (powerline-nano-theme)

#+END_SRC
* Emacs Enhancements 
 :PROPERTIES:
 :CUSTOM_ID: enhancements
 :END:
** Which-Key
 :PROPERTIES:
 :CUSTOM_ID: which-key
 :END:
 A cheat sheet that comes in only when you need it
#+BEGIN_SRC emacs-lisp
(use-package which-key
	:ensure t 
	:config
	(which-key-mode))
#+END_SRC
** Ace-Window
 :PROPERTIES:
 :CUSTOM_ID: ace-window
 :END:
Useful if you work on multiple windows and want an efficient way of switching between them
#+BEGIN_SRC emacs-lisp
(use-package ace-window
     :ensure t
     :init 
     (global-set-key (kbd "M-o") 'ace-window)
     (setq aw-background nil))
#+END_SRC
** GDB
 :PROPERTIES:
 :CUSTOM_ID: gdb
 :END:
- Mainly for c-based languages
- Its great that emacs has built-in native gdb 
#+BEGIN_SRC emacs-lisp
;; Debugger
(global-set-key (kbd "C-c d") 'gdb)
(setq gdb-many-windows t) ;; have multiple windows when debugging
(setq  gdb-show-main t )  ;; Non-nil means display source file containing the main routine at startup
#+END_SRC
** Ivy-Integration 
 :PROPERTIES:
 :CUSTOM_ID: ivy
 :END:
 Ivy manual: https://oremacs.com/swiper/
#+BEGIN_SRC emacs-lisp

 ;; Ivy
 (use-package ivy
     :ensure t
     :diminish (ivy-mode)
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq ivy-display-style 'fancy)
     (setq ivy-count-format "(%d/%d) ")
     (setq enable-recursive-minibuffers t)
     (setq ivy-use-virtual-buffers t))

 ;; Swiper 
 (use-package swiper
     :ensure t
     :bind 
     (("C-s" . swiper-isearch)
     ("C-a" . swiper-isearch-backward)
     ("C-c C-r" . ivy-resume)))

 ;; Counsel
 (use-package counsel
     :ensure t
     :bind
     (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("C-x b" . counsel-switch-buffer)
     ("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line))
     :config
     (setq counsel-find-file-ignore-regexp "\\(?:^[#.]\\)\\|\\(?:[#~]$\\)\\|\\(?:^Icon?\\)"
     ;; Add smart-casing (-S) to default command arguments:
     counsel-rg-base-command "rg -S --no-heading --line-number --color never %s ."
     counsel-ag-base-command "ag -S --nocolor --nogroup %s"
     counsel-pt-base-command "pt -S --nocolor --nogroup -e %s"
     counsel-find-file-at-point t))

 ;; ivy-posframe
 (use-package ivy-posframe
     :ensure t
     :requires ivy
     :config
     (setq ivy-posframe-display-functions-alist
     '((swiper-isearch . ivy-posframe-display-at-frame-top-center)
     (swiper-isearch-backward . ivy-posframe-display-at-frame-top-center)
     (counsel-find-file . ivy-posframe-display-at-window-center)
     (counsel-M-x . ivy-posframe-display-at-window-center)
     (t . ivy-posframe-display-at-window-center)))
     (setq ivy-posframe-parameters
     '((left-fringe . 10)
     (right-fringe . 10)))
     (setq ivy-posframe-border-width 1)
     (put 'ivy-posframe 'face-alias 'default)
     (ivy-posframe-mode 1))

#+END_SRC
** Ranger
 :PROPERTIES:
 :CUSTOM_ID: ranger
 :END:
 - An alternative to dired.
 - ranger file manager but in emacs, works the exact same way
#+BEGIN_SRC emacs-lisp
;; Ranger
(use-package ranger
   :ensure t
   :config
   (ranger-override-dired-mode t)
   (global-set-key (kbd "C-c r") 'ranger)) ;; start ranger from file

#+END_SRC
** All-The-Icons
 :PROPERTIES:
 :CUSTOM_ID: all-icons
 :END:
- This is where the file icons come from
- Make sure to run `M-x all-the-icons-install-fonts` if you want them to work!
#+BEGIN_SRC emacs-lisp
   ;; Pretty Icons
 (use-package all-the-icons
     :ensure t)

 ;; icons for ivy
 (use-package all-the-icons-ivy
     :ensure t
     :after (all-the-icons ivy)
     :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup)
     :config
     (setq all-the-icons-ivy-file-commands
     '(counsel-find-file 
       counsel-file-jump 
       counsel-recentf 
       counsel-projectile 
       counsel-projectile-switch-to-buffer 
       counsel-projectile-grep 
       counsel-projectile-git-grep 
       counsel-projectile-switch-project 
       counsel-projectile-find-file 
       counsel-projectile-find-file-dwin 
       counsel-projectile-find-dir)))
   
 ;; icons for dired/ranger mode
 (use-package all-the-icons-dired
     :ensure t
     :after ranger
     :config
     (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
* Projectile
 :PROPERTIES:
 :CUSTOM_ID: projectile
 :END:
- Amazing tool for managing projects! 
- Projectile Homepage: https://projectile.readthedocs.io/en/latest/ 
- Counsel-Projectile: https://github.com/ericdanan/counsel-projectile 
#+BEGIN_SRC emacs-lisp
  ;; Projectile-mode 
 (use-package projectile
     :ensure t
     :custom 
     (projectile-project-search-path '("~/Projects/"))
     :config
     (setq projectile-sort-order 'recently-active)
     (setq projectile-completion-system 'ivy)
     (projectile-mode t))

 ;; Counsel-Projectile
(use-package counsel-projectile
   :requires projectile
   :ensure t
   :bind (("C-c p" . projectile-command-map)
         ("C-c p SPC" . counsel-projectile)
         ("C-c p p" . counsel-projectile-switch-project)
         ("C-c p f" . counsel-projectile-find-file)
         ("C-c p F" . counsel-projectile-find-file-dwim)
         ("C-c p b" . counsel-projectile-switch-to-buffer)
         ("C-c p g" . counsel-projectile-grep)
         ("C-c p G" . counsel-projectile-git-grep)))
#+END_SRC
* Shell
 :PROPERTIES:
 :CUSTOM_ID: shell
 :END:
   #+BEGIN_SRC emacs-lisp
(use-package better-shell
    :ensure t
    :bind 
    (("C-`" . better-shell-shell) ;; open terminal
    ("C-;" . better-shell-remote-open)))

(use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x)) ;; check if its mac
    (exec-path-from-shell-initialize)))

;; Eshell 
(global-set-key (kbd "C-~") 'eshell) ;; terminal alternative in emacs
   #+END_SRC
* Globals
 :PROPERTIES:
 :CUSTOM_ID: globals
 :END:
** Snippets
 :PROPERTIES:
 :CUSTOM_ID: snippets
 :END:
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
    :ensure t
    :init 
    (yas-global-mode 1)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "C-c o") yas-maybe-expand)
    (define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand))

(use-package yasnippet-snippets 
    :ensure t)
    
;; snippets for React.js
(use-package react-snippets
  :requires yasnippet
  :ensure t)
#+END_SRC 
** FlyCheck
 :PROPERTIES:
 :CUSTOM_ID: flycheck
 :END:
- Checking syntax...basically 
- Official Site: https://www.flycheck.org/en/latest/
#+BEGIN_SRC emacs-lisp
(use-package flycheck
     :ensure t
     :config
     (setq flycheck-check-syntax-automatically '(mode-enabled save)); run flycheck only on save
     (global-flycheck-mode t)) 
     
#+END_SRC
** Company
 :PROPERTIES:
 :CUSTOM_ID: company
 :END:
- The framework I use for my autocomplete. 
- Official Site: http://company-mode.github.io/
#+BEGIN_SRC emacs-lisp
  (use-package company
      :ensure t
      :bind
      (:map company-active-map
      ("M-n" . nil) ; old select next key
      ("<tab>" . company-select-next)) ;; make tab our new select next key
      :config
      (setq company-tooltip-limit 5) ; show 5 candidates at one time
      (setq company-idle-delay 0.5) ;; slightly delay for optimal performance
      (setq company-minimum-prefix-length 3) ;; show completions after 3 chars
      (setq company-selection-wrap-around t)
      (setq global-company-mode t)) 


      ;; elisp autocomplete
      (defun my-elisp-mode-hook ()
      "Hook for `emacs-lisp-mode'"
      (set (make-local-variable 'company-backends)
      '((company-capf company-elisp company-dabbrev-code company-yasnippet company-files))))
    
      (add-hook 'emacs-lisp-mode-hook 'my-elisp-mode-hook)
      (add-hook 'emacs-lisp-mode-hook 'company-mode)
#+END_SRC

** Undo-Tree
 :PROPERTIES:
 :CUSTOM_ID: undo-tree
 :END:
 You MUST have this for evil mode to work
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC
* Org & Markdown
 :PROPERTIES:
 :CUSTOM_ID: org-markdown
 :END:
** Enable Org-Mode
#+BEGIN_SRC emacs-lisp
(use-package org 
   :ensure t
   :pin org)
#+END_SRC
** Org Bullets
#+Begin_SRC emacs-lisp
(use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))

(defun add-pcomplete-to-capf ()
  (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))

(add-hook 'org-mode-hook #'add-pcomplete-to-capf)
#+END_SRC
** MarkDown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode
  ("\\.\\(md\\|markdown\\)\\'" . markdown-mode))
#+END_SRC
* Latex 
 :PROPERTIES:
 :CUSTOM_ID: latex
 :END:
- I still actually prefer Overleaf for latex editing...Hoping to just use emacs for it one day
- *DEPRECIATED* Below writing packages are only kept for reverence
  - auctex & tex (smoother latex editing)
  - pdf-tools (pdf support in emacs)
  - wc-mode (word counter)
  - writegood-mode (sentence/word choice checker)
#+BEGIN_SRC emacs-lisp
;; Enable if you wish, kept for reference, may be utilized in the future
 (use-package tex
    :disabled
    :ensure auctex)

;; Settings 
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-save-query nil)

;; Spellchecker and Linter for Latex
(add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
(add-hook 'LaTeX-mode-hook 'flycheck-mode)
#+END_SRC
* Coding Productivity 
 :PROPERTIES:
 :CUSTOM_ID: coding
 :END:
** Beacon 
 :PROPERTIES:
 :CUSTOM_ID: beacon
 :END:
I never lose where my cursor is thanks to this
#+BEGIN_SRC emacs-lisp
(use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC
** Neotree
 :PROPERTIES:
 :CUSTOM_ID: neotree
 :END:
I want to try treemacs in the future, but this has been amazing for file browsing
#+BEGIN_SRC emacs-lisp
  ;; Neotree
  (use-package neotree
      :ensure t
      :defer t
      :bind ("C-c t" . neotree-toggle)
      :config 
      (setq neo-smart-open t) ; update every time its toggled
      (setq neo-theme (if (display-graphic-p) 'icons 'arrow))) ; add icons (utilizes all-the-icons)
#+END_SRC
** Iedit
 :PROPERTIES:
 :CUSTOM_ID: iedit
 :END:
- Nice utility that finds all matches and replaces them with the user's choice
- Very similiar to multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package iedit
    :ensure t
    :bind (("C-c c" . iedit-mode)))
#+END_SRC
** Dump-Jump
 :PROPERTIES:
 :CUSTOM_ID: dump-jump
 :END:
A jump to definition package that just works. Love this one!
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
    :bind 
    (("M-g o" . dumb-jump-go-other-window)
    ("M-g j" . dumb-jump-go)
    ("M-g b" . dumb-jump-back)
    ("M-g i" . dumb-jump-go-prompt)
    ("M-g x" . dumb-jump-go-prefer-external)
    ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config 
    (setq dumb-jump-selector 'ivy) 
    :ensure)
#+END_SRC
* Git
 :PROPERTIES:
 :CUSTOM_ID: git
 :END:
- Magit: Amazing git interface I have yet to master...
- git-timemachine: flip through a file's full list of version. Revert to any given phase easily
- Official Site: https://magit.vc/
#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t
    :bind
    (("C-x g" . magit-status)
    ("C-x M-g" . magit-dispatch-popup)))
    
(use-package gitignore-mode
  :ensure t
  :mode (("\\.gitignore\\'" . gitignore-mode)
        ("\\.dockerignore\\'" . gitignore-mode))) ;; syntax from gitignore is more or less identical to that of .dockerignore

(use-package gitconfig-mode
  :ensure t
  :mode "\\.gitconfig\\'")

(use-package git-timemachine
  :ensure t
  :commands git-timemachine)

;; smerge mode deals with merge conflicts in git. Prefix mapping is C-c v
(setq smerge-command-prefix "\C-cv")
#+END_SRC
* Hydra
 :PROPERTIES:
 :CUSTOM_ID: Hydra
 :END:
- I have yet to properly play around with this package, you can go pretty crazy here
- Allows you set up your own key maps where pressing one key instantly gives access to many other keybindings
- Repo: https://github.com/abo-abo/hydra (Has a video demo)
** config
#+BEGIN_SRC emacs-lisp
  (use-package hydra
      :ensure t
      :config
      (setq hydra-is-helpful t)
      (setq hydra-hint-display-type 'lv))

 ;; for reference when I learn hydra better 
 ;; gives access to functions that make nice hydra UI
 (use-package pretty-hydra
    :disabled
    :ensure t
    :requires hydra)
#+END_SRC
** Hydras
- I hope to fill these up in the future
- Customize as you see fit
#+BEGIN_SRC emacs-lisp
  ;; I actually find this first one pretty useful
  (defhydra hydra-zoom (global-map "<f2>" :color pink)
    "zoom"
    ("k" text-scale-increase "in")
    ("j" text-scale-decrease "out")
    ("0" (text-scale-adjust 0) "reset")
    ("q" nil "quit" :color blue))

   ;; projectile, I would change this hydras global key if I wasnt using vim bindings...
  (defhydra hydra-projectile (global-map "C-SPC" :color pink :columns 2)
    "🚀 Projectile 🚀"
    ("f" counsel-projectile-find-file "find")
    ("F" counsel-projectile-find-file-dwim "find-dwim")
    ("g" counsel-projectile-git-grep "git grep")
    ("G" counsel-projectile-grep "grep")
    ("s" counsel-projectile-switch-project "switch project")
    ("b" counsel-projectile-switch-to-buffer "buffer switch")
    ("r" projectile-recentf "recent files")
    ;; counsel-projectile-switch-project has similiar functionality but this is much quicker
    ("k" projectile-kill-buffers "kill project buffers")
    ("q" nil "quit" :color blue))

  ;; finding and searching
  (defhydra hydra-window (global-map "M-SPC" :color pink :columns 3)
   "⚡⚡ Ivy/Windows ⚡⚡"
    ("f" counsel-find-file "find")
    ("x" counsel-M-x "M-x")
    ("B" counsel-switch-buffer "switch buffer")
    ("s" swiper-isearch "search")
    ;; splitting
    ("v" split-window-right "v-split")
    ("b" split-window-below "h-split")
    ;; movement
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ;; deletion and quitting
    ("d" delete-window "delete window")
    ("K" kill-this-buffer "kill buffer")
    ("q" nil "quit" :color blue))
#+END_SRC
* LSP
 :PROPERTIES:
 :CUSTOM_ID: lsp
 :END:
  - LSP stands for Language Server Protocal and makes setting up autocompletion and syntax checking easy. 
  - Check the [[https://github.com/emacs-lsp/lsp-mode][Official Repo]] to what to install for your preferred development language
** config
#+BEGIN_SRC emacs-lisp  
  (use-package lsp-mode
     :ensure t
     :config
     (setq gc-cons-threshold 100000000)
     (setq read-process-output-max (* 1024 1024)) ;; 1mb
     (setq lsp-idle-delay 0.3) ; small delay for less strain
     (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error"))
     (setq lsp-prefer-flymake nil) ; we are using flycheck and not flymake
     ;; hook your languages below
     (add-hook 'c++-mode-hook #'lsp)
     (add-hook 'c-mode-hook #'lsp)
     (add-hook 'python-mode-hook #'lsp)
     (add-hook 'js2-mode-hook #'lsp)
     (add-hook 'json-mode-hook #'lsp)
     (add-hook 'web-mode-hook #'lsp)
     (add-hook 'yaml-mode-hook #'lsp)
     (add-hook 'typescript-mode-hook #'lsp))

  (use-package lsp-ui
    :requires lsp-mode flycheck
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-flycheck-live-reporting nil) ;; allows our previous flycheck setting to only check syntax on save to work
    (setq eldoc-idle-delay 1) ;; delay eldoc for 1 second
    ;; ui customization
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-delay 1 ;; display doc after 1 second of hovering
          lsp-ui-doc-use-childframe t
          lsp-ui-doc-position 'top
          lsp-ui-doc-include-signature t
          lsp-ui-sideline-enable nil
          lsp-ui-flycheck-enable t
          lsp-ui-flycheck-list-position 'right
          lsp-ui-peek-enable t
          lsp-ui-peek-list-width 60
          lsp-ui-peek-peek-height 25))

   (use-package company-lsp
     :requires company
     :ensure t
     :config
     (push 'company-lsp company-backends)
      ;; Disable client-side cache because the LSP server does a better job.
     (setq company-transformers nil
           company-lsp-async t
           company-lsp-cache-candidates nil
           company-lsp-enable-snippet t
           company-lsp-enable-recompletion t))

#+END_SRC
* DAP
 :PROPERTIES:
 :CUSTOM_ID: dap
 :END:
- DAP stands for Debug Adapter Protocal works similiarly to LSP but for debugging
- Repo: https://github.com/emacs-lsp/dap-mode (includes everything you need to install for your desired development language)
#+BEGIN_SRC emacs-lisp
   ;; enable hydra bindings in dap mode
   (use-package dap-hydra
       :ensure nil
       :requires hydra)

  ;; only installing because dap-mode requires it
   (use-package posframe
       :ensure t)

   (use-package dap-mode
       :ensure t
       :requires hydra
       :bind
       (("C-x c" . dap-debug)
       ("C-c i" . dap-debug-edit-template))
       :hook
       (lsp-mode . (lambda () (dap-mode t) (dap-ui-mode t) (dap-tooltip-mode 1) (tooltip-mode 1)))
       :config
       (add-hook 'dap-stopped-hook
       (lambda (arg) (call-interactively #'dap-hydra)))) ;; enable hydra on breakpoint stop

#+END_SRC
* C/C++
 :PROPERTIES:
 :CUSTOM_ID: cpp
 :END:
- Clangd Language Server: https://clang.llvm.org/extra/clangd/Installation.html
- Cpp extras (mostly optional)
  - [[https://www.google.com/search?q=cmake&oq=cmake&aqs=chrome..69i57j0l6j69i65.645j0j4&client=ubuntu&sourceid=chrome&ie=UTF-8][Cmake]]
  - [[https://llvm.org/][llvm]]
  - [[https://clang.llvm.org/][Clang]]
** Settings
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4) ;; indentation for C-based languages

;; disable other checkers since we only want to utilize clangd language server
(setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)) 

;; enable modern font lock for >=c++11
(use-package modern-cpp-font-lock
    :ensure t
    :config
    (modern-c++-font-lock-global-mode t))
#+END_SRC
** Debugging
Still experimenting with this, native gdb in emacs is also really good (described in [[#gdb][GDB]] section of this config file)
#+BEGIN_SRC emacs-lisp
(use-package dap-gdb-lldb
  :ensure nil
  :requires dap-mode
  :config
  (dap-register-debug-template
  "GDB config"
  (list :type "gdb"
        :request "launch"
        :name "GDB::Run"
        :target "test"
        :program "test"
        :cwd "/home/marin/Projects")))

#+END_SRC
** Clang-Format
 - The only package that utilizes quelpa at the moment :))
 - Formats your C++ code
 - Documentation: https://clang.llvm.org/docs/ClangFormat.html
 - You should also search how to install *clang-format* on your specific OS
#+BEGIN_SRC emacs-lisp
(use-package clang-format 
   :ensure t
   :bind 
   (("C-c u" . clang-format-region) ;; format current line
   ("C-c f" . clang-format-buffer)) ;; format entire file
   :config
   (setq clang-format-style-option ".clang-format")) 
 ;; (setq clang-format-style-option "llvm")) use this option if you do not have a .clang-format file
 
 (use-package clang-format+
  :quelpa (clang-format+
           :fetcher github
           :repo "SavchenkoValeriy/emacs-clang-format-plus")
           :config
           (add-hook 'c-mode-common-hook #'clang-format+-mode))
#+END_SRC
* Python
 :PROPERTIES:
 :CUSTOM_ID: python
 :END:
- Python-pip: https://pip.pypa.io/en/stable/
- Python Language Server: https://pypi.org/project/python-language-server/
** Settings
#+BEGIN_SRC emacs-lisp
  ;; version 
  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")

  ;; indentation
  (setq-default python-basic-offset 4) 
  (setq-default python-indent-offset 4) 
  (setq python-indent-guess-indent-offset t) ;; allow emacs to guess offset
  (setq python-indent-guess-indent-offset-verbose nil) ;; remove annoying warning
#+END_SRC
** Debugging
Note: the template is meant to be edited to personal preferences
#+BEGIN_SRC emacs-lisp
(use-package dap-python
  :ensure nil
  :requires dap-mode
  :config
  (dap-register-debug-template "My App"
  (list :type "python"
        :args "-i"
        :cwd nil
        :env '(("DEBUG" . "1"))
        :target-module (expand-file-name "~/src/myapp/.env/bin/myapp")
        :request "launch"
        :name "My App")))
#+END_SRC
** Elpy
 No longer need it because of LSP but keeping it for reference
#+BEGIN_SRC emacs-lisp
(use-package elpy
   :disabled
   :ensure t
   :config 
   (elpy-enable))
#+END_SRC
** Virtualenv
 Remove disabled if you need it, I have yet to develop seriously in Python
#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
   :disabled
   :ensure t
   :config
   (venv-initialize-interactive-shells)
   (venv-initialize-eshell))
#+END_SRC
 :PROPERTIES:
 :CUSTOM_ID: python
 :END:
* Web-Development 
 :PROPERTIES:
 :CUSTOM_ID: web-dev
 :END:
 Language servers install command (that I use): 
 #+BEGIN_SRC markdown
 `npm i -g typescript-language-server vscode-json-languageserver vscode-html-languageserver-bin yaml-language-server vscode-css-languageserver-bin bash-language-server`
 #+END_SRC
** Web-Mode
 - Autonomous emacs major-mode for editing web templates. 
 - Essential for web-development. Highlighting, auto-closing tags, just great.
 - Official Website: http://web-mode.org/
#+BEGIN_SRC emacs-lisp
(use-package web-mode
    :ensure t
    :config
	   (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.jsx?$\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
	   (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
	   (setq web-mode-engines-alist
		 '(("django"    . "\\.html\\'")
		   ("ejs"  . "\\.ejs\\'")))
	   (setq web-mode-ac-sources-alist
	   '(("css" . (ac-source-css-property))
	   ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
           ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
	 ;; Emmet
	 (add-hook 'web-mode-hook 'emmet-mode) ;; triggers with C-RET
	 ;; Indentation
	 (setq web-mode-markup-indent-offset 2)
	 (setq web-mode-code-indent-offset 2)
	 (setq web-mode-css-indent-offset 2)
	 ;; Auto-closing
	 (setq web-mode-auto-close-style 2)
	 (setq web-mode-tag-auto-close-style 2)
	 (setq web-mode-enable-auto-closing t)
	 (setq web-mode-enable-auto-quoting t)
	 (with-eval-after-load 'web-mode
	 (define-key web-mode-map (kbd "C-c h") 'web-mode-element-close)) ;; auto-close tag help
	 ;; Highlighting
	 (setq web-mode-enable-current-column-highlight t)
	 (setq web-mode-enable-current-element-highlight t))

;; enable css coloring
(use-package rainbow-mode 
    :ensure t
    :mode "\\.css\\'")

;; format code
;; need to run 'npm i -g prettier' in order for this to work (Locally should work too)
(use-package prettier-js
    :ensure t
    :config 
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (add-hook 'web-mode-hook 'prettier-js-mode))

#+END_SRC
** Modes
These are modes related to web-dev that I have worked with 
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
    :ensure t
    :init
    (setq-default rjsx-basic-offset 2))
    
(use-package json-mode
    :ensure t)

(use-package yaml-mode
    :ensure t
    :mode (("\\.yml\\'" . yaml-mode)
         ("\\.yaml\\'" . yaml-mode)))
    
(use-package dockerfile-mode
    :ensure t)
#+END_SRC
** Skewer
'live web-development in emacs'
#+BEGIN_SRC emacs-lisp
(use-package skewer-mode
    :ensure t
    :commands skewer-mode run-skewer
    :config
    (add-hook 'js2-mode-hook 'skewer-mode)
    (add-hook 'css-mode-hook 'skewer-css-mode)
    (add-hook 'html-mode-hook 'skewer-html-mode)
    (skewer-setup))
    
#+END_SRC
** Impatient-Mode
'See the effect of your HTML as you type it.'
   #+BEGIN_SRC emacs-lisp
   (use-package impatient-mode
       :ensure t)  
   #+END_SRC
** Emmet 
More on emmet: https://www.emmet.io/
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
    :ensure t
    :hook
    ((css-mode  . emmet-mode)
    (php-mode  . emmet-mode)
    (sgml-mode . emmet-mode)
    (rjsx-mode . emmet-mode)
    (web-mode  . emmet-mode)))
#+END_SRC
* JavaScript/TypeScript
 :PROPERTIES:
 :CUSTOM_ID: js
 :END:
- JavaScript/TypeScript language server: https://github.com/theia-ide/typescript-language-server
- Select *ts-ls* when prompted which server to install 
** Node Path
Adds the node_modules/.bin directory to the buffer exec_path.
#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path
   :ensure t
   :hook 
   ((web-mode . add-node-modules-path)
   (rjsx-mode . add-node-modules-path)))
#+END_SRC
** Debugging
 Any kind of setup can be found in the dap repo that was mentioned previously...
*** Front-end
#+BEGIN_SRC emacs-lisp
;; debugging in chrome
(use-package dap-chrome
  :ensure nil
  :requires dap-mode)
  
;; debugging in firefox
(use-package dap-firefox
    :ensure nil
    :requires dap-mode)
#+END_SRC
*** Back-end
#+BEGIN_SRC emacs-lisp
(use-package dap-node
  :ensure nil
  :requires dap-mode)
#+END_SRC
** Js2-mode
- A 'better' mode for editing javascript files. Can sometimes have performance issues depending on emacs version
- There should be fixes in Emacs >= 27.05
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
    :ensure t
    :hook (j2-mode. js2-imenu-extras-mode))
    :config 
    (setq js2-strict-missing-semi-warning nil) ;; disable annoying warnings
    (setq js2-mode-show-parse-errors nil) ;; do not parse errors, let langauage server do that
    (setq-default js2-basic-offset 2) ;; set indentation to 2
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

#+END_SRC

 :PROPERTIES:
 :CUSTOM_ID: ts
 :END:
** TIDE
All for typescript
#+BEGIN_SRC emacs-lisp
;; enable typescript in emacs
(use-package typescript-mode
    :ensure t
    :mode (("\\.ts\\'" . typescript-mode)
          ("\\.tsx\\'" . typescript-mode))
    :config
    (setq-default typescript-indent-level 2)) ;; indent 2 spaces by default

;; typescript integrated development environment
(use-package tide
    :ensure t
    :config
    (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))
    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)
    ;; formats the buffer before saving
    (add-hook 'before-save-hook 'tide-format-before-save)
    (add-hook 'typescript-mode-hook #'setup-tide-mode))
#+END_SRC
